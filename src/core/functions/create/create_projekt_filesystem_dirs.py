#!/usr/bin/env python3
# -------------------------------------------------------------------------- #
# Filename:     create_projekt_filesystem_dirs.py
# Purpose:      Recreates a directory tree based on a JSON file.
# Description:  This script reads a JSON file containing a directory structure
#               and recreates that structure within a specified target directory.

# Author:       phil_man@mac.com
# Copyright:    Copyright (c) 2025
# Disclaimer:   Disclaimer at bottom of script.
# License:      GNU General Public License v3.0 (GPL-3.0).
#               https://www.gnu.org/licenses/gpl-3.0.en.html

# Version:      2026.1.0
# Status:       Production
# Type:         Utility
# Created:      2025-07-01
# Modified:     2025-08-03

# Changelog:    Changelog at bottom of script.
# -------------------------------------------------------------------------- #

import json
import os
import logging
import sys

def create_projekt_filesystem_dirs(json_filepath: str, target_root_dir: str, new_base_directory_name: str):
    """
    Recreates a directory tree based on a JSON file generated by create_custom_directories.py.

    Args:
        json_filepath (str): The absolute path to the JSON file containing the directory structure.
        target_root_dir (str): The absolute path to the root directory where the tree will be recreated.
        new_base_directory_name (str): The name of the new base directory to create within target_root_dir.
    """
    if not os.path.exists(json_filepath):
        logging.error(f"Error: JSON file not found at {json_filepath}")
        return

    if not os.path.isdir(target_root_dir):
        logging.error(f"Error: Target root directory does not exist or is not a directory: {target_root_dir}")
        return

    final_target_dir = os.path.join(target_root_dir, new_base_directory_name)
    try:
        os.makedirs(final_target_dir, exist_ok=True)
        logging.info(f"Created base directory: {final_target_dir}")
    except OSError as e:
        logging.error(f"Error creating base directory {final_target_dir}: {e}")
        return

    try:
        with open(json_filepath, 'r') as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        logging.error(f"Error decoding JSON from {json_filepath}: {e}")
        return
    except Exception as e:
        logging.error(f"An unexpected error occurred while reading {json_filepath}: {e}")
        return

    subdirectories = data.get('subdirectories', [])
    if not subdirectories:
        logging.warning(f"No subdirectories found in {json_filepath}.")
        return

    logging.info(f"Recreating directory tree in: {final_target_dir}")
    created_count = 0
    for entry in subdirectories:
        relative_path = entry.get('path')
        if relative_path:
            full_path = os.path.join(final_target_dir, relative_path)
            try:
                os.makedirs(full_path, exist_ok=True)
                logging.info(f"Created: {full_path}")
                created_count += 1
            except OSError as e:
                logging.error(f"Error creating directory {full_path}: {e}")
        else:
            logging.warning(f"Skipping entry with no 'path' key: {entry}")

    logging.info(f"Successfully created {created_count} directories.")

if __name__ == "__main__":
    # Example Usage (for testing the script directly)
    # You would typically call create_projekt_filesystem_dirs from another script
    if len(sys.argv) != 4:
        logging.info("Usage: python create_projekt_filesystem_dirs.py <json_filepath> <target_root_dir> <new_base_directory_name>")
        sys.exit(1)

    json_file = sys.argv[1]
    target_dir = sys.argv[2]
    new_base_dir_name = sys.argv[3]

    create_projekt_filesystem_dirs(json_file, target_dir, new_base_dir_name)


# -------------------------------------------------------------------------- #

# DISCLAIMER:   This file is part of LOGIK-PROJEKT.

#               Copyright Â© 2025 STRENGTH IN NUMBERS

#               LOGIK-PROJEKT creates directories, files, scripts & tools
#               for use with Autodesk Flame and other software.

#               LOGIK-PROJEKT is free software.

#               You can redistribute it and/or modify it under the terms
#               of the GNU General Public License as published by the
#               Free Software Foundation, either version 3 of the License,
#               or any later version.

#               This program is distributed in the hope that it will be
#               useful, but WITHOUT ANY WARRANTY; without even the
#               implied warranty of MERCHANTABILITY or
#               FITNESS FOR A PARTICULAR PURPOSE.

#               See the GNU General Public License for more details.
#               You should have received a copy of the GNU General
#               Public License along with this program.

#               If not, see <https://www.gnu.org/licenses/gpl-3.0.en.html>.

#               Contact: phil_man@mac.com

# -------------------------------------------------------------------------- #
# C2 A9 32 30 32 35 53 54 52 45 4E 47 54 48 2D 49 4E 2D 4E 55 4D 42 45 52 53 #
# -------------------------------------------------------------------------- #
# Changelog:
# -------------------------------------------------------------------------- #
