#! /Applications/Nuke15.0v2/Nuke15.0v2.app/Contents/MacOS/libnuke-15.0.2.dylib -nx
version 15.0 v2
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="0" y="38" w="1512" h="916" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="849" stretch="1"/>
            <splitter orientation="2">
                <split size="526"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
                <split size="370"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
                <page id="Scenegraph.1"/>
                <page id="uk.co.thefoundry.scripteditor.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /PROJEKTS/123456_demo_f/software/templates/nuke/00_script-start/00_2d-start_v001.nk
 frame 1001
 first_frame 1001
 last_frame 1101
 lock_range true
 fps 23.976
 format "3840 2160 0 0 3840 2160 1 UHD_4K"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 render_mode top-down
 colorManagement OCIO
 OCIO_config fn-nuke_studio-config-v1.0.0_aces-v1.3_ocio-v2.1
 defaultViewerLUT "OCIO LUTs"
 workingSpaceLUT scene_linear
 monitorLut sRGB
 monitorOutLUT "Raw (ACES)"
 int8Lut matte_paint
 int16Lut texture_paint
 logLut compositing_log
 floatLut scene_linear
 addUserKnob {20 PROJEKT}
 addUserKnob {1 projekt_name_knob l PROJEKT:}
 projekt_name_knob 123456_demo_f
 addUserKnob {22 projekt_jumpto_fs l "Show in File System" -STARTLINE T projekt_core.utilities.openDirectory(projekt_core.settings.projekt_path())}
 addUserKnob {1 projekt_path_knob l Path:}
 projekt_path_knob /PROJEKTS/123456_demo_f
 addUserKnob {26 projekt_warning l "" +STARTLINE T "<b style=\"color:green\">Name: good</b>"}
 addUserKnob {26 path_warning l "" +STARTLINE T "<b style=\"color:green\">Path: good</b>"}
 addUserKnob {26 projekt_div l "" +STARTLINE}
 addUserKnob {1 shot_name_knob l Shot:}
 shot_name_knob templates
 addUserKnob {22 shot_jumpto_fs l "Show in File System" -STARTLINE T projekt_core.utilities.openDirectory(projekt_core.settings.projekt_shot_path())}
 addUserKnob {26 shot_warning l "" +STARTLINE T "<b style=\"color:orange\">ERROR: shot path does not exist on disk!</b>"}
 addUserKnob {26 shot_div l "" +STARTLINE}
 addUserKnob {4 favorites l Bookmarks: M {projekt shot work}}
 favorites shot
 addUserKnob {26 fav_div l "" +STARTLINE}
 addUserKnob {22 set_projekt_from_env_vars l "---setup PROJEKT---" -STARTLINE T projekt_core.vfxtools.set_projekt_from_env_vars()}
 addUserKnob {22 refresh_shell_env l "refresh shell variables" T projekt_core.vfxtools.read_projekt_env() +STARTLINE}
 addUserKnob {22 unpack_direnv_diff l "unpack direnv_diff" -STARTLINE T projekt_core.vfxtools.set_nuke_shell_info()}
 addUserKnob {26 div_name l "" +STARTLINE}
 addUserKnob {26 shell_info l "" +STARTLINE T Output...}
}
BackdropNode {
 inputs 0
 name BackdropNode3
 xpos -291
 ypos -1370
 bookmark false
 bdwidth 1282
 bdheight 852
 z_order -100
}
BackdropNode {
 inputs 0
 name Store_here_all_elements_you_producing
 tile_color 0x313649ff
 note_font "Helvetica Bold"
 note_font_size 100
 xpos -5813
 ypos -1365
 bookmark false
 bdwidth 2118
 bdheight 676
 z_order -100
}
BackdropNode {
 inputs 0
 name Store_here_all_elements_you_producing1
 tile_color 0x304939ff
 note_font "Helvetica Bold"
 note_font_size 100
 xpos -3696
 ypos -2314
 bookmark false
 bdwidth 2008
 bdheight 821
 z_order -100
}
BackdropNode {
 inputs 0
 name __plates__
 tile_color 0x7f652eff
 note_font "Helvetica Bold"
 note_font_size 100
 xpos -3695
 ypos -1362
 bookmark false
 bdwidth 2013
 bdheight 674
 z_order -100
}
BackdropNode {
 inputs 0
 name plece_for_3d_scene
 tile_color 0x2b2b2bff
 note_font "Verdana Bold"
 note_font_size 30
 note_font_color 0x40404ff
 xpos -1570
 ypos -1370
 bookmark false
 bdwidth 1279
 bdheight 852
 z_order -100
}
BackdropNode {
 inputs 0
 name BackdropNode50
 tile_color 0x42424201
 label "<font color=#000000><font size=7><b>Denoise</b></font>"
 note_font Helvetica
 note_font_size 30
 note_font_color 0xffffffff
 xpos -3695
 ypos -688
 bdwidth 2013
 bdheight 698
 z_order -90
}
BackdropNode {
 inputs 0
 name __CAM__backdrop
 tile_color 0x358888ff
 label <center>Camera
 note_font "Verdana Bold"
 note_font_size 20
 xpos -1490
 ypos -790
 bookmark false
 bdwidth 511
 bdheight 242
 z_order -10
}
BackdropNode {
 inputs 0
 name ________LDS
 tile_color 0x358888ff
 label "<center>Lens distort"
 note_font "Verdana Bold"
 note_font_size 20
 xpos -944
 ypos -790
 bookmark false
 bdwidth 556
 bdheight 243
 z_order -10
}
BackdropNode {
 inputs 0
 name " 1"
 tile_color 0x444444ff
 label Plate
 note_font Arial
 note_font_size 60
 note_font_color 0x7e7e7eff
 xpos -3610
 ypos -1165
 bdwidth 299
 bdheight 421
 z_order -1
}
BackdropNode {
 inputs 0
 name " 2"
 tile_color 0x892121ff
 label plate-denoise
 note_font Arial
 note_font_size 60
 note_font_color 0x7e7e7eff
 xpos -3666
 ypos -481
 bdwidth 370
 bdheight 249
 z_order -1
}
BackdropNode {
 inputs 0
 name " 4"
 tile_color 0x892121ff
 label "Offline\n"
 note_font Arial
 note_font_size 60
 note_font_color 0x7e7e7eff
 xpos -2078
 ypos -1172
 bdwidth 282
 bdheight 426
 z_order -1
}
BackdropNode {
 inputs 0
 name " 5"
 tile_color 0x1f292fff
 label "Prior Renders"
 note_font Arial
 note_font_size 60
 note_font_color 0x5b7d89ff
 xpos -3832
 ypos 4221
 bdwidth 2582
 bdheight 421
 z_order -1
}
BackdropNode {
 inputs 0
 name " "
 tile_color 0x7f4400ff
 label " Viewer Input"
 note_font Arial
 note_font_size 60
 note_font_color 0xff8733ff
 xpos -1399
 ypos -405
 bdwidth 648
 bdheight 326
}
BackdropNode {
 inputs 0
 name " 3"
 tile_color 0x3d1f24ff
 label " ROTO"
 note_font Arial
 note_font_size 60
 note_font_color 0x5e845bff
 xpos -5813
 ypos -689
 bdwidth 2118
 bdheight 699
}
BackdropNode {
 inputs 0
 name " 8"
 tile_color 0x7f4400ff
 label " QC"
 note_font Arial
 note_font_size 60
 note_font_color 0xff8733ff
 xpos -4507
 ypos 2801
 bdwidth 841
 bdheight 263
}
BackdropNode {
 inputs 0
 name BackdropNode1
 tile_color 0x930000ff
 label Write_EXR
 note_font_size 42
 xpos -3837
 ypos 3577
 bdwidth 583
 bdheight 290
}
BackdropNode {
 inputs 0
 name BackdropNode10
 tile_color 0x632016ff
 gl_color 0x8e000000
 label output
 note_font_size 60
 xpos -3839
 ypos 3274
 bdwidth 587
 bdheight 265
}
BackdropNode {
 inputs 0
 name BackdropNode42
 tile_color 0x1e1e1eff
 label regrain
 note_font_size 45
 xpos -3515
 ypos 2615
 bdwidth 576
 bdheight 210
}
BackdropNode {
 inputs 0
 name BackdropNode6
 tile_color 0x649999ff
 label "Mocha Tracks"
 note_font "Verdana Bold"
 note_font_size 30
 xpos -213
 ypos -776
 bdwidth 1119
 bdheight 223
}
BackdropNode {
 inputs 0
 name BackdropNode9
 tile_color 0x6c6a6600
 label GEO
 note_font_size 42
 xpos -1535
 ypos -1166
 bdwidth 1210
 bdheight 255
 z_order 1
}
NoOp {
 inputs 0
 name Anchor_20d5136be1
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.anchorOnCreate()\n    except:\n        pass"
 knobChanged stamps.anchorKnobChanged()
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0xffffff01
 note_font_size 20
 xpos -3505
 ypos -892
 addUserKnob {20 anchor_tab l "Anchor Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T anchor}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T plate}
 addUserKnob {26 prev_name l "" +STARTLINE +HIDDEN T Anchor_20d5136be1}
 addUserKnob {3 showing l "" +STARTLINE +HIDDEN}
 addUserKnob {1 tags l Tags t "Comma-separated tags you can define for each Anchor, that will help you find it when invoking the Stamp Selector by pressing the Stamps shortkey with nothing selected."}
 tags 2D,
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 createStamp l new t "Create a new Stamp for this Anchor." -STARTLINE T stamps.stampCreateWired(nuke.thisNode())}
 addUserKnob {22 selectStamps l select t "Reconnect all of this Anchor's Stamps." -STARTLINE T stamps.wiredSelectSimilar(nuke.thisNode().name())}
 addUserKnob {22 reconnectStamps l reconnect -STARTLINE T stamps.anchorReconnectWired()}
 addUserKnob {22 zoomNext l "zoom next" t "Navigate to this Anchor's next Stamp on the Node Graph." -STARTLINE T stamps.wiredZoomNext(nuke.thisNode().name())}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
set Nd9b2e400 [stack 0]
PostageStamp {
 name Stamp4
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -3505
 ypos -836
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T plate}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T <i>BG</i>}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_20d5136be1
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
Reformat {
 inputs 0
 format "3840 2160 0 0 3840 2160 1 UHD_4K"
 name Reformat1
 label "\[lindex \[split \[value format]] end]\n"
 note_font "Verdana Bold"
 note_font_size 12
 xpos -1983
 ypos -929
}
NoOp {
 name Anchor_10fda0b8ef
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.anchorOnCreate()\n    except:\n        pass"
 knobChanged stamps.anchorKnobChanged()
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0xffffff01
 note_font_size 20
 xpos -1983
 ypos -858
 addUserKnob {20 anchor_tab l "Anchor Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T anchor}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title offline
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T workpic}
 addUserKnob {26 prev_name l "" +STARTLINE +HIDDEN T Anchor_10fda0b8ef}
 addUserKnob {3 showing l "" +STARTLINE +HIDDEN}
 addUserKnob {1 tags l Tags t "Comma-separated tags you can define for each Anchor, that will help you find it when invoking the Stamp Selector by pressing the Stamps shortkey with nothing selected."}
 tags 2D,
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 createStamp l new t "Create a new Stamp for this Anchor." -STARTLINE T stamps.stampCreateWired(nuke.thisNode())}
 addUserKnob {22 selectStamps l select t "Reconnect all of this Anchor's Stamps." -STARTLINE T stamps.wiredSelectSimilar(nuke.thisNode().name())}
 addUserKnob {22 reconnectStamps l reconnect -STARTLINE T stamps.anchorReconnectWired()}
 addUserKnob {22 zoomNext l "zoom next" t "Navigate to this Anchor's next Stamp on the Node Graph." -STARTLINE T stamps.wiredZoomNext(nuke.thisNode().name())}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
PostageStamp {
 name Stamp28
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -1983
 ypos -806
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title offline
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T offline}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T <i>WorkPic</i>}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_10fda0b8ef
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
push $Nd9b2e400
PostageStamp {
 name Stamp5
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -3505
 ypos -382
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T plate}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." T <i>BG</i>}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_20d5136be1
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
OFXcom.absoft.neatvideo5_v5 { DNP 
 ProfileName "Unspecified device (4096x2160p).dnp"
 NFP NTBkAPotAAAAAAAAAAABAAAAAACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAAAAAAIA/AACAPwAAgD/NzMw+zcxMP83MTD8BAAAAAADAPwAAwD8AAIA/AACAPwAAgD8AAAAAAAAAP5qZmT4AAAAAAAAAAAAAgD8AAAAAAAAAAAAAgD8AAIA/AACAPwAAgD8AAQAAAACAPwAAAAAAAAAAAACAPwAAAAAAAAAAAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAgAAAAAAgD8AAAAAAAAAAAAAwD8AAAAAAAAAAAAAgD8BAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAAAAAAAAAAAQD8AAIA/AACAPwAAgD8BAQEBAQEBAQAAgD8AAIA/AQAAAAAAAAAAAAAAAAAAAAAAgD8AAIA/AACAPwAAgw
 PresetName "custom preset"
 ParamsHash1 903203811
 ParamsHash2 264
 ParamsHash3 0
 name "Reduce Noise v5_3"
 xpos 3563
 ypos 1412

 xpos -3486
 ypos -495
 selected false
 disable false

 xpos -3487
 ypos -377
 selected false
 disable false

 xpos -3505
 ypos -321
 selected false
 disable false
}
NoOp {
 name Anchor_1bc563a7f2
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.anchorOnCreate()\n    except:\n        pass"
 knobChanged stamps.anchorKnobChanged()
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0xffffff01
 note_font_size 20
 xpos -3505
 ypos -270
 addUserKnob {20 anchor_tab l "Anchor Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T anchor}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate-denoise
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T background-denoise}
 addUserKnob {26 prev_name l "" +STARTLINE +HIDDEN T Anchor_1bc563a7f2}
 addUserKnob {3 showing l "" +STARTLINE +HIDDEN}
 addUserKnob {1 tags l Tags t "Comma-separated tags you can define for each Anchor, that will help you find it when invoking the Stamp Selector by pressing the Stamps shortkey with nothing selected."}
 tags 2D,
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 createStamp l new t "Create a new Stamp for this Anchor." -STARTLINE T stamps.stampCreateWired(nuke.thisNode())}
 addUserKnob {22 selectStamps l select t "Reconnect all of this Anchor's Stamps." -STARTLINE T stamps.wiredSelectSimilar(nuke.thisNode().name())}
 addUserKnob {22 reconnectStamps l reconnect -STARTLINE T stamps.anchorReconnectWired()}
 addUserKnob {22 zoomNext l "zoom next" t "Navigate to this Anchor's next Stamp on the Node Graph." -STARTLINE T stamps.wiredZoomNext(nuke.thisNode().name())}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
set Nda02ce00 [stack 0]
PostageStamp {
 name Stamp35
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -3168
 ypos 2666
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate-denoise
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T plate-denoise}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_1bc563a7f2
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
push $Nd9b2e400
NoOp {
 name Stamp34
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated Sep 27 2019"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -3162
 ypos 2735
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T Plate}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 advanced_reconnection 1
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_20d5136be1
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated Sep 27 2019." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.0</big></b></a>"}
}
push $Nda02ce00
PostageStamp {
 name Stamp13
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -3487
 ypos 163
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate-denoise
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T plate-denoise}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_1bc563a7f2
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
Group {
 inputs 3
 name DasGrain1
 help "DasGrain makes regraining as simple as clicking a few buttons.\n\nFollow the steps in the Help tab and you'll have a perfect regrain in no time!"
 onCreate "import random\n\ntestimonials = \[\n    \"Such an elegant solution, love it!\",\n    \"Your gizmo is beyond expectation\",\n    \"Totally awesome!\",\n    \"DasGrain is officially the best thing ever\",\n    \"It's really working!\",\n    \"Das bringt Tr&auml;nen in meine Augen\",\n    \"DasGrain is the salvation we waited for\",\n    \"I save a lot of time, and definitely my nerves :)\",\n    \"It's alright\",\n    \"My new favourite node, thanks!<br>Having said that, ...\"\n    ]\n\nnode = nuke.thisNode()\nnode\['testimonial'].setValue('<br><br><br><i>&laquo;%s&raquo;</i><br>&mdash; anonymous<br><br>' % random.choice(testimonials))\nnode\['box'].setFlag(nuke.NO_ANIMATION)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() == 'box':\n    this_frame = nuke.frame()\n    n\['sample_frame'].setValue(this_frame)\n\nif k.name() == 'scatter':\n    n\['divider04'].setVisible(k.value() == False)\n    n\['divider05'].setVisible(k.value() == True)"
 tile_color 0x7f7f7fff
 label "v1.8 | 2021-03-07"
 xpos -3487
 ypos 2731
 addUserKnob {20 DasGrain_tab l DasGrain}
 addUserKnob {41 output t "<strong>regrained comp</strong> it is what it sais\n<strong>plate grain</strong> plate minus degrained plate\n<strong>normalised grain</strong> check if the normalization worked. It should be as even as possible. This is what you want to output if you want to prerender a grain plate. Later you can plug it into the <i>external grain</i> input of another DasGrain\n<strong>adapted grain</strong> check if the adaptation worked. Output this if you want to further manipulate the grain (who knows what the sup is gonna come up with...). After, simply plus it to your comp (at that point the comp has to be in the <i>camera</i> colorspace, as set in the <i>Analyze</i> tab).\n<strong>grain QC</strong> check if voronoi seams are visible (&#8594; edgeblend), or the scattered grain looks different to the original plate grain (&#8594; maybe bad sample area or wrong luminance degrain amount)" T Output.output}
 addUserKnob {4 meta l "metadata from" t "Chances are you want to use the metadata from the plate, but who am I to assume :)" M {COMP PLATE}}
 addUserKnob {26 spacer01_1 l " " T " "}
 addUserKnob {20 GrainGroupBegin l "" +STARTLINE n -2}
 addUserKnob {20 Analyze_tab l Analyze}
 addUserKnob {26 text l <strong>Colorspace}
 addUserKnob {41 project_colorspace l project t "set this to the project color space" T OCIOColorSpace1.in_colorspace}
 addUserKnob {22 python_button l "What's this all about?" -STARTLINE T "nuke.message(\"Regraining in other color spaces than the camera native linear space can lead to unexpected behaviour.\\n\\nFor example converting Alexa plates to ACEScg might introduce negative values due to ACEScg's smaller gamut. In that case converting back to ARRI Linear ALEXA Wide Gamut will probably help.\\nJust set <i>project</i> to ACEScg and <i>camera</i> to ARRI Linear ALEXA Wide Gamut.\\n\\nThis might be transferable to other cameras, but I've only tested with Alexas.\\n---------\\nBypass by setting both knobs to the same value.\")"}
 addUserKnob {41 camera_colorspace l camera t "set this to the camera native linear space" T OCIOColorSpace1.out_colorspace}
 addUserKnob {26 text_2 l " " T " "}
 addUserKnob {26 level l "<strong>Degrain amount"}
 addUserKnob {78 luminance t "Leave this at 1 if you're working on a completely degrained plate.\n\nIn case you decided to leave some luminance grain in the degrained plate (use the DegrainHelper node for this!), set this to the same value as in the DegrainHelper in order to compensate.\n\nIf the luminance degrain amount was set to 0.8, this needs to be set to 0.8 as well.\n\nYou need to select a mask of all elements that cover the plate, otherwise the grain of whole comp will be too strong " n 1}
 luminance 1
 addUserKnob {26 divider01 l " "}
 addUserKnob {41 degrain_amount_mask l "degrain amount mask" t "Use this channel from the mask input to specify in what area of the comp the missing luminance grain needs to be compensated." T Multiply1.maskChannelMask}
 addUserKnob {41 invert_mask l invert -STARTLINE T Multiply1.invert_mask}
 addUserKnob {26 spacer02 l " " T " "}
 addUserKnob {26 divider02 l <strong>Analyze}
 addUserKnob {3 number_of_frames l "number of frames" t "Set the number of sample frames to be spread across the input range.\n\nMore frames lead to higher accuracy.\n\nIf there are particularly bright or dark frames, set them manually in the knob below to make sure they are part of the analysis.\n\nIf you want to set all sample frames manually, set this to 0 and add the frames in the knob below."}
 number_of_frames 10
 addUserKnob {1 additional_frames l "additional frames" t "Set additional frames like this:\n\n1001,1020,1053 (single frames)\n1020-1040 (frame ranges)\n1020-1040x4 (frame ranges with step)"}
 addUserKnob {3 sample_count l "sample count" t "The samples are spread across the sample range (which gets calculated automatically) based on the AlexaV3LogC curve. This results in more samples in the dark areas and less samples in the brights.\n\nMore samples lead to a more detailed response curve (while the accuracy is limited by the quality of the degrain)."}
 sample_count 20
 addUserKnob {22 analyze l Analyze t "this is where the magic happens" T "import base64\nthis = nuke.thisNode()\n\n\ndef _sample_count(this):\n    \"\"\"returns the sample count\"\"\"\n\n    sample_count = int(this\['sample_count'].value())\n\n    if sample_count <= 0:\n        raise RuntimeError('Enter a sample count greater than 0')\n\n    else:\n        return sample_count\n\n\ndef _generate_frame_list(this):\n    \"\"\"converts the frames submitted by the user into a list\"\"\"\n\n    frame_list = \[]\n    number_of_frames = int(this\['number_of_frames'].value())\n    additional_frames = this\['additional_frames'].value()\n\n    if number_of_frames < 1 and additional_frames is '':\n        raise RuntimeError('Either set the number of frames > 0\\nor define additional frames')\n\n    first_frame = max(this.input(1).firstFrame(), this.input(2).firstFrame())\n    last_frame = min(this.input(1).lastFrame(), this.input(2).lastFrame())\n\n    if number_of_frames > 0:\n        distance = (last_frame - first_frame) / (number_of_frames)\n        frame = first_frame + distance / 2\n\n        for x in range(number_of_frames):\n            int_frame = int(round(frame))\n            if int_frame not in frame_list:\n                frame_list.append(int_frame)\n\n            frame += distance\n\n    frange = nuke.FrameRanges(additional_frames.split(','))\n\n    for r in frange:\n        for f in r:\n            if f >= first_frame and f <= last_frame:\n                if f not in frame_list:\n                    frame_list.append(f)\n\n    frame_list.sort()\n\n    return frame_list\n\n\ndef _setup_for_multiframe(frame_list):\n    \"\"\" arranges all sample frames next to each other, starting at frame 0\n    and sets the frame number knob of the FrameBlend node\"\"\"\n\n    time_warp = nuke.toNode('TimeWarp1')\n    time_warp\['lookup'].clearAnimated()\n    time_warp\['lookup'].setAnimated()\n    anim_list = \[]\n\n    for n, frame in enumerate(frame_list):\n        anim_list.append(nuke.AnimationKey(n, frame))\n\n    anim = time_warp\['lookup'].animation(0)\n    anim.addKey(anim_list)\n\n    frame_blend = nuke.toNode('FrameBlend1')\n    frame_blend\['endframe'].setValue(len(frame_list)-1)\n\n\ndef _generate_sample_list(sample_count, sample_range, sample_radius):\n    \"\"\"generate a list of sample values spread equally between the\n    min and max values of the sample range\"\"\"\n\n    sample_list = \[]\n\n    for item in range(0, sample_count):\n        sample_list.append(float(item) / sample_count * (sample_range\[1] - sample_range\[0]) + sample_range\[0] + sample_radius)\n\n    return sample_list\n\n\ndef _get_sample_range(channel, channel_list, frame_list):\n    \"\"\" samples the minimum and maximum values of the given frame range and\n    sets the sample range to those values\"\"\"\n\n    curve_tool = nuke.toNode('CurveTool_Range')\n    min_knob = curve_tool\['minlumapixvalue']\n    max_knob = curve_tool\['maxlumapixvalue']\n\n    min_knob.setAnimated()\n    max_knob.setAnimated()\n\n    curve_tool\['channels'].setValue(channel)\n\n    nuke.execute(curve_tool, nuke.FrameRanges(frame_list))\n\n    index = channel_list.index(channel)\n    min_list = \[key.y for key in min_knob.animation(index).keys()]\n    max_list = \[key.y for key in max_knob.animation(index).keys()]\n\n    min_value = min(min_list)\n    max_value = max(max_list)\n\n    min_knob.clearAnimated()\n    max_knob.clearAnimated()\n    curve_tool\['minlumapixdata'].clearAnimated()\n    curve_tool\['maxlumapixdata'].clearAnimated()\n\n    return \[min_value, max_value]\n\n\ndef _sample_it(keyer, curve_tool, sample, sample_radius):\n    \"\"\"analyze the grain level per channel and sample value in the sample range\"\"\"\n\n    keyer\['temp_expr0'].setValue(str(sample - sample_radius))\n    keyer\['temp_expr1'].setValue(str(sample + sample_radius))\n\n    intensity_knob = curve_tool\['intensitydata']\n    intensity_knob.clearAnimated()\n    intensity_knob.setAnimated()\n\n    nuke.execute(curve_tool, nuke.frame(), nuke.frame())\n    sample_values = intensity_knob.value()\n    intensity_knob.clearAnimated()\n\n    return sample_values\n\n\ndef check_inputs(this):\n    if this.input(1) is None:\n        raise RuntimeError('no plate connected')\n\n    if this.input(2) is None:\n        raise RuntimeError('no degrained plate connected')\n\n    def format_tuple(node):\n        return node.format().width(), node.format().height(), node.format().pixelAspect()\n\n    if format_tuple(this.input(1)) != format_tuple(this.input(2)):\n        raise RuntimeError(\"Format missmatch: Make sure the formats of plate and degrained plate match.\")\n\n\ndef start(this):\n    \"\"\"let's do this!\"\"\"\n\n    check_inputs(this)\n\n    with this:\n        frame_list = _generate_frame_list(this)\n        _setup_for_multiframe(frame_list)\n        sample_count = _sample_count(this)\n\n        blank = base64.b64decode('cmVkIHtjdXJ2ZX0KZ3JlZW4ge2N1cnZlfQpibHVlIHtjdXJ2ZX0=').decode('ascii')\n\n        lut = nuke.toNode('Sampler1')\['lut']\n        lut.fromScript(blank)\n\n        channel_list = \['red', 'green', 'blue']\n\n        keyer = nuke.toNode('Expression2')\n        copy = nuke.toNode('Copy2')\n\n        curve_tool = nuke.toNode('CurveTool')\n        pixel = curve_tool\['ROI'].value()\[2] * curve_tool\['ROI'].value()\[3]\n\n        task = nuke.ProgressTask('Analysing...')\n        step = 100.0 / 3 / sample_count\n        progress = step\n\n        time_warp = nuke.toNode('TimeWarp1')\n        frame_blend = nuke.toNode('FrameBlend1')\n\n        time_warp\['disable'].setValue(False)\n        frame_blend\['disable'].setValue(False)\n\n        for channel in channel_list:\n            task.setMessage('\{\} range'.format(channel))\n\n            copy\['from0'].setValue('rgba.\{\}'.format(channel))\n\n            sample_range = _get_sample_range(channel, channel_list, frame_list)\n            sample_radius = (sample_range\[1] - sample_range\[0]) / sample_count / 2\n            sample_list = _generate_sample_list(sample_count, sample_range, sample_radius)\n\n            for sample in sample_list:\n                if task.isCancelled():\n                    return\n\n                task.setProgress(int(progress))\n\n                sample_values = _sample_it(keyer, curve_tool, sample, sample_radius)\n\n                task.setMessage('\{\} channel at \{\}'.format(channel, round(sample, 2)))\n\n                if sample_values\[3] * pixel >= 10:\n                    lut.setValueAt(sample_values\[0] / sample_values\[3], sample_values\[1] / sample_values\[3], channel_list.index(channel))\n\n                progress += step\n\n        time_warp\['lookup'].clearAnimated()\n        time_warp\['disable'].setValue(True)  # hopefully prevents slowing down the comp\n        frame_blend\['disable'].setValue(True)  # hopefully prevents slowing down the comp\n\n    del task\n\n\nstart(this)\n" +STARTLINE}
 addUserKnob {26 divider03 l " "}
 addUserKnob {41 analysis_mask l "analysis mask" t "Use this channel from the mask input to control what area of the plate will be analyzed.\n\nUsefull if the degrain is obviously bad in some areas." T ChannelMerge1.A}
 addUserKnob {6 invert_1 l invert -STARTLINE}
 addUserKnob {20 Adjust_tab l Adjust}
 addUserKnob {22 whatsthis l "What am I looking at?" T "nuke.message(\"After the analysis you'll see the sampled grain response curves here. On the x-axis is the brightness of the image and on the y-axis the grain intensity. Grain increases with brightness, so <strong>the slope of the curves should always be positive</strong> (they should always go up &#8599;).<br><br>The quality of the curves depends entirely on the quality of the degrain. If the curves look wrong (for example they go up and down), try to improve the degrain first. If they still look wrong and the resulting regrain doesn't work well enough, you can try to improve the curves here by deleting/correcting all points that don't follow an upwards trend.<br><br>You can also extend the curves (again: with an upwards trend) if the comp has values that don't exist in the plate.<br><br>Note: The curve is used for both the normalization as well as the adaptation of the grain, so it doesn't give direct control of the grain intensity.\")" +STARTLINE}
 addUserKnob {41 lut l "" +STARTLINE T Sampler1.lut}
 addUserKnob {20 Replace_tab l Replace}
 addUserKnob {6 external_grain l "use external grain" t "Use external grain from a second DasGrain, with the output set to 'normalised grain', to replace masked area.\nConnect it to the 'external grain' input of this DasGrain (it's a bit hidden on the left side of the node)." +STARTLINE}
 addUserKnob {26 divider04 l <strong>Scatter}
 addUserKnob {26 divider05 l <strong>Scatter +HIDDEN T "<span style=\"color:red\">Make sure you're sampling an area without any plate detail.</a>"}
 addUserKnob {6 scatter l activate t "Activates the scatter function. It generates a new grain based on the plate grain in the sample box using a Voronoi noise." +STARTLINE}
 addUserKnob {41 useGPUIfAvailable l "Use GPU if available" -STARTLINE T VoronoiScatter.useGPUIfAvailable}
 addUserKnob {15 box l "sample box" t "Define an area that is used as a source for the scatter function. The plate grain in this area should be as even as possible, without any visible detail."}
 box {100 100 500 300}
 addUserKnob {3 sample_frame l "sample frame" t "The frame at which the grain is being sampled. Is set automatically once the sample box is changed." +DISABLED}
 sample_frame 1
 addUserKnob {4 stereo l "stereo behaviour" t "randomize offset per view: same voronoy pattern for all views, but different offset\n\nrandomize pattern per view: different voronoy pattern for every view" M {none "randomize offset per view" "randomize pattern per view" ""}}
 addUserKnob {26 spacer06 l "" +STARTLINE T " "}
 addUserKnob {6 overlay l "overlay cell pattern" t "Overlay the cell pattern of the voronoy noise. Useful to check where the seams are and if distortion or blending is necessary." +STARTLINE}
 addUserKnob {7 cell_size l "cell size" t "Cell size of the scatter. Shoudn't be too small, as lower grain frequencies might break.\nCan't be too big either, to prevent it from breaking the border of the samplebox (will error if it does)." R 5 100}
 cell_size 40
 addUserKnob {26 spacer07 l "" +STARTLINE T " "}
 addUserKnob {20 concealer l "edge concealer" n 1}
 concealer 0
 addUserKnob {26 concealer_help l " " T "If you can see the voronoi pattern in the grain QC output,\nincrease the edge blend size."}
 addUserKnob {3 edge_blend_size l "edge blend size" t "Set the output to grain QC. If you see the cell seams, increase the edge blend size to conceal them.\n\nThis is a bit hacky and slow."}
 addUserKnob {26 tip l "" -STARTLINE T "sloooow - keep this below 3 if possible"}
 addUserKnob {26 distortion_help l " " T "\nDistortion might help as well, if somehow the straight\nseams are visible (you might want to toggle the overlay\nwhile adjusting)."}
 addUserKnob {7 amplitude R 0 50}
 addUserKnob {7 frequency R 0 50}
 frequency 15
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 divider06 l "" +STARTLINE}
 addUserKnob {41 replace_mask l "replace mask" t "Use this channel from the mask input to specify where you want to use scattered grain instead of the adapted plate grain." -STARTLINE T Merge9.maskChannelMask}
 addUserKnob {41 invert_mask_1 l invert -STARTLINE T Merge9.invert_mask}
 addUserKnob {20 GrainGroupEnd l "" +STARTLINE n -3}
 addUserKnob {20 Help_tab l Help}
 addUserKnob {26 basic_setup l "" +STARTLINE T "<font size=\"5\">Basic setup</font>"}
 addUserKnob {26 ""}
 addUserKnob {26 explanation l "" +STARTLINE T "<strong>Bold</strong> steps are always necessary"}
 addUserKnob {26 steps l "" +STARTLINE T "<br><strong>1. This should be the only regrain node in your comp.<br>2. Connect <i>plate</i>, <i>degrained plate</i> and <i>comp</i>.<br>&nbsp;&nbsp;&nbsp;&nbsp;The comp should be done on the degrained plate!</strong><br>3. Set the <i>luminance degrain amount</i>.<br><strong>4. Press the <i>Analyze</i> button.</strong><br>5. Correct the response curves in the <i>Adjust</i> tab.<br>6. Move the <i>sample box</i> to an area without any plate detail and activate <i>scatter</i>.<br>7. If necessary, activate <i>edge blend</i> and/or <i>distortion</i> to conceal seams."}
 addUserKnob {26 in_depth l "" +STARTLINE T "<br>For an in depth explanation of the steps, read the tooltips and check out this video:<br><a href=\"https://vimeo.com/284820390/\"><span style=\"color:#C8C8C8;\">https://vimeo.com/284820390</a>"}
 addUserKnob {26 pushthebutton l "" +STARTLINE T "<br><br>If the result is not as expected and you don't know why, push this button:"}
 addUserKnob {22 troubleshoot l Troubleshoot t HEEEEEEELP T "import base64\n\nmessages = \[]\n\nthis = nuke.thisNode()\n\n#########################\n\nif this.input(0) is None or this.input(1) is None or this.input(2) is None:\n    messages.append(\"<font color='red'><strong>ERROR</strong></font> Plate, degrained plate and comp need to be connected to the appropriate inputs.\")\n\n#########################\n\nelse:\n\n    def format_to_tuple(g):\n        \"\"\"returns (1024, 786, 2.0)\n        \"\"\"\n        return (g.format().width(), g.format().height(), g.format().pixelAspect())\n\n    format_set = set(\[\n        format_to_tuple(this.input(0)),\n        format_to_tuple(this.input(1)),\n        format_to_tuple(this.input(2)),\n        ])\n    if len(format_set) != 1:\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> Format missmatch: Make sure formats of plate, degrained plate and comp match.\")\n\n    if (this.input(1).firstFrame() != this.input(2).firstFrame()) or (this.input(1).lastFrame() != this.input(2).lastFrame()):\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> The frame ranges of plate and degrained plate don't match. Double check that they belong together.\")\n\n#########################\n\nmessages.append(\"Double check that plate and degrained plate haven't been modified in any way (paint, despill, etc).\")\n\n#########################\n\nif this\['luminance'].getValue() == 1:\n    messages.append(\"Are you working on a completely degrained plate? If not, you might have to set the luminance degrain amount.\")\n\n#########################\n\nblank = base64.b64decode('cmVkIHtjdXJ2ZX0KZ3JlZW4ge2N1cnZlfQpibHVlIHtjdXJ2ZX0=').decode('ascii')\n\nwith this:\n    Sampler = nuke.toNode('Sampler1')     \n    if Sampler\['lut'].toScript() == blank:\n        messages.append(\"<font color='red'><strong>ERROR</strong></font> You haven't pressed the Analyze button yet!\")\n\n#########################\n\nclass BadThings(Exception): pass\n\ndef thingy():\n    with this:\n        Sampler = nuke.toNode('Sampler1')\n        list = this\['lut'].toScript().replace('\}','').split('\\n')\n        for item in list:\n            sample_value = 0\n            for value in item.split(' '):\n                try:\n                    value == float(value)\n                    if value < sample_value:\n                        raise BadThings(\"<font color='orange'><strong>WARNING</strong></font> Check and fix the response curves. Their slopes should always be positive (the curves should always go up &#8599;).\")\n                        \n                    else:\n                        sample_value = value\n                except ValueError:\n                    # Ignore non-numeric things like x-values of \"x5.46\" and channel names like \"red\{\" etc\n                    pass\ntry:\n    thingy()\nexcept BadThings as e:\n    messages.append(str(e))\n    \n#########################\n\nif this\['scatter'].value() == True:\n    if this\['box'].getValue() == \[100.0, 100.0, 500.0, 300.0]:\n        messages.append(\"<font color='orange'><strong>WARNING</strong></font> Scatter has been activated, but the sample box is still in its default position. Are you sure that's a good area to sample?\")\n\n#########################\n\nmessages.append(\"Did you copy/paste DasGrain from another script? Make sure to reanalyze and to reset the sample area if you are using scatter.\")\n\n#########################\n\nif len(messages) > 0:\n    nuke.message(\"<font size=\\\"5\\\">Things worth checking</font><br><br>\"\n                               \"%s<br><br><br>If any of this doesn't make sense to you, it might be worth checking out the video on vimeo.\" % (\n                                  \"<hr>\".join(\"%s: %s\" % (i+1, m) for i, m in enumerate(messages))))\n" +STARTLINE}
 addUserKnob {26 dont_despair l "" +STARTLINE T "<br>If it still doesn't work and you're about to flip the table, send me a <a href=\"mailto:holtzf+nuke@gmail.com?subject=Help with DasGrain v1.7.8\"><span style=\"color:#C8C8C8;\">mail</a>.<br>I'm happy to help! :)"}
 addUserKnob {20 Info_tab l Info}
 addUserKnob {26 dasname l "" +STARTLINE T "<font size='5'>DasGrain</font> v1.8<br>"}
 addUserKnob {26 text_1 l "" +STARTLINE T "DasGrain makes regraining as simple as clicking a few buttons.<br>Follow the steps in the <i>Help</i> tab and you'll have a perfect\nregrain<br>in no time!"}
 addUserKnob {26 ""}
 addUserKnob {26 info l "" +STARTLINE T "Last change: 2021-03-07\n\n"}
 addUserKnob {26 name_1 l "" +STARTLINE T "Fabian Holtz"}
 addUserKnob {26 mail l "" +STARTLINE T "<a href=\"mailto:holtzf+nuke@gmail.com?subject=Help with DasGrain v1.7.8\"><span style=\"color:#C8C8C8;\">holtzf+nuke@gmail.com</a>"}
 addUserKnob {26 testimonial l "" +STARTLINE T "<br><br><br><i>&laquo;It's really working!&raquo;</i><br>&mdash; anonymous<br><br>"}
 addUserKnob {26 ""}
 addUserKnob {26 credit l "" +STARTLINE T "<br>VoronoiScatter based on <a href=\"http://www.nukepedia.com/blink/image/voronoi/\"><span style=\"color:#C8C8C8;\">Ivan Busquets' implementation</a> of<br> libNoise's\nVoronoi generator"}
 addUserKnob {26 thanks l "" +STARTLINE T "<br>Special thanks to Ben Dickson for bearing with my questions and<br>problems and RSP comp for the valuable feedback."}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x7f7f7fff
  label "normalise grain"
  note_font_size 30
  xpos 170
  ypos 1662
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode11
  tile_color 0x7f7f7fff
  label "add grain"
  note_font_size 30
  xpos 830
  ypos 2766
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode13
  tile_color 0x7f7f7fff
  label scatter
  note_font_size 30
  xpos -50
  ypos 2022
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode14
  tile_color 0x7f7f7fff
  label "analyze grain"
  note_font_size 30
  xpos -159
  ypos 606
  bdwidth 319
  bdheight 877
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x7f7f7fff
  label "grain response curve"
  note_font_size 30
  xpos 610
  ypos 2574
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x7f7f7fff
  label QC
  note_font_size 30
  xpos 1050
  ypos 3222
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0x7f7f7fff
  label "grain response curve"
  note_font_size 30
  xpos 610
  ypos 1422
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x7f7f7fff
  label "adapt grain"
  note_font_size 30
  xpos 170
  ypos 2574
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x7f7f7fff
  label "sample range"
  note_font_size 30
  xpos -490
  ypos 606
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode7
  tile_color 0x7f7f7fff
  label "luminance level"
  note_font_size 30
  xpos 280
  ypos -282
  bdwidth 760
  bdheight 685
 }
 BackdropNode {
  inputs 0
  name BackdropNode8
  tile_color 0x7f7f7fff
  label "plate grain"
  note_font_size 30
  xpos 170
  ypos 606
  bdwidth 320
  bdheight 110
 }
 BackdropNode {
  inputs 0
  name BackdropNode9
  tile_color 0x7f7f7fff
  label replace
  note_font_size 30
  xpos 60
  ypos 2191
  bdwidth 540
  bdheight 226
 }
 Input {
  inputs 0
  name DEGRAINED_PLATE
  label "\[value number]"
  note_font_size 30
  xpos 730
  ypos -896
  number 2
 }
 OCIOColorSpace {
  in_colorspace {{OCIOColorSpace1.in_colorspace}}
  out_colorspace {{OCIOColorSpace1.out_colorspace}}
  name OCIOColorSpace2
  xpos 730
  ypos -490
 }
 Dot {
  name Dot9
  xpos 764
  ypos -390
 }
set Nda15ac00 [stack 0]
 Dot {
  name Dot28
  xpos 764
  ypos -198
 }
set Nda039400 [stack 0]
 Dot {
  name Dot32
  xpos 764
  ypos 234
 }
set Nda039800 [stack 0]
push $Nda039400
 Dot {
  name Dot27
  xpos 624
  ypos -198
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace1
  xpos 590
  ypos -130
 }
 Dot {
  name Dot7
  xpos 624
  ypos -54
 }
set Nda048400 [stack 0]
 Input {
  inputs 0
  name PLATE
  label "\[value number]"
  note_font_size 30
  xpos 290
  ypos -892
  number 1
 }
 Dot {
  name Dot50
  xpos 324
  ypos -726
 }
set Nda03a400 [stack 0]
 OCIOColorSpace {
  in_colorspace scene_linear
  out_colorspace scene_linear
  name OCIOColorSpace1
  xpos 290
  ypos -490
 }
 Dot {
  name Dot29
  xpos 324
  ypos -198
 }
set Nda069400 [stack 0]
 Dot {
  name Dot6
  xpos 464
  ypos -198
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace2
  xpos 430
  ypos -130
 }
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge4
  xpos 430
  ypos -58
 }
 Multiply {
  channels rgb
  value {{"1 / parent.luminance - 1"} 0 0 0}
  name Multiply6
  xpos 430
  ypos 14
 }
 Dot {
  name Dot31
  xpos 464
  ypos 90
 }
push $Nda048400
 Merge2 {
  inputs 2
  operation plus
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge5
  xpos 590
  ypos 86
 }
 Colorspace {
  colorspace_in YCbCr
  name Colorspace3
  xpos 590
  ypos 158
 }
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge6
  xpos 590
  ypos 230
 }
 Dot {
  name Dot35
  xpos 624
  ypos 306
 }
set Nda072c00 [stack 0]
push $Nda039800
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge7
  xpos 730
  ypos 302
  disable {{"Multiply6.value.r == 0"}}
 }
 Dot {
  name Dot2
  xpos 764
  ypos 522
 }
set Nda077a00 [stack 0]
 Dot {
  name Dot30
  xpos 764
  ypos 690
 }
set Nda078600 [stack 0]
 Dot {
  name Dot55
  xpos 764
  ypos 1170
 }
set Nda080c00 [stack 0]
 Input {
  inputs 0
  name mask
  label "\[value number]"
  note_font_size 30
  xpos 1170
  ypos -896
  number 3
 }
 Dot {
  name Dot39
  xpos 1204
  ypos 258
 }
set Nda081400 [stack 0]
 Dot {
  name Dot26
  xpos 1204
  ypos 1074
 }
set Nda081800 [stack 0]
 Invert {
  name Invert2
  xpos 180
  ypos 1064
  disable {{!parent.invert_1}}
 }
push $Nda078600
push $Nda069400
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge27
  xpos 290
  ypos 686
 }
 Dot {
  name Dot3
  xpos 324
  ypos 786
 }
set Nda082400 [stack 0]
 Dot {
  name Dot5
  xpos 104
  ypos 786
 }
set Nda083000 [stack 0]
push $Nda083000
 Copy {
  inputs 2
  from0 {{{parent.Copy2.from0}}}
  to0 rgba.red
  name Copy3
  xpos 70
  ypos 848
 }
 Expression {
  expr0 abs(r)
  channel1 {none none none rgba.alpha}
  expr1 "r == 0"
  channel2 none
  channel3 none
  name Expression4
  xpos 70
  ypos 926
 }
set Nda083800 [stack 0]
push $Nda077a00
 Colorspace {
  colorspace_out AlexaV3LogC
  name Colorspace5
  xpos 70
  ypos 518
 }
 Clamp {
  maximum_enable false
  name Clamp2
  xpos -40
  ypos 512
 }
 Dot {
  name Dot1
  xpos -116
  ypos 522
 }
set Nda089400 [stack 0]
 Dot {
  name Dot48
  xpos -116
  ypos 786
 }
set Nda089800 [stack 0]
push $Nda089800
 Copy {
  inputs 2
  from0 rgba.blue
  to0 rgba.red
  name Copy2
  xpos -150
  ypos 848
 }
 Expression {
  temp_name0 min
  temp_expr0 0.7299618363380431
  temp_name1 max
  temp_expr1 0.768380880355835
  channel0 {none none none rgba.alpha}
  expr0 "r >= min && r <= max"
  channel1 none
  channel2 none
  channel3 none
  name Expression2
  xpos -150
  ypos 926
 }
 Dot {
  name Dot4
  xpos -116
  ypos 1002
 }
 ChannelMerge {
  inputs 2
  operation stencil
  name ChannelMerge2
  xpos -40
  ypos 985
 }
push $Nda083800
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos 70
  ypos 992
 }
 ChannelMerge {
  inputs 2
  A -rgba.green
  operation multiply
  name ChannelMerge1
  xpos 70
  ypos 1057
  disable {{!A}}
 }
 Copy {
  inputs 2
  from0 {{{parent.Copy2.from0}}}
  to0 rgba.green
  name Copy4
  xpos 70
  ypos 1160
 }
 Premult {
  channels {rgba.red rgba.green -rgba.blue none}
  name Premult1
  xpos 70
  ypos 1238
 }
 TimeWarp {
  lookup 1233
  time ""
  filter nearest
  name TimeWarp1
  xpos 70
  ypos 1286
  disable true
 }
 FrameBlend {
  channels {rgba.red rgba.green -rgba.blue rgba.alpha}
  startframe 0
  endframe 9
  userange true
  name FrameBlend1
  xpos 70
  ypos 1352
  disable true
 }
 CurveTool {
  avgframes 0
  channels {rgba.red rgba.green -rgba.blue rgba.alpha}
  ROI {0 0 {width} {height}}
  intensitydata {1.227414189e-06 0.0002159334148 0 3.962764068e-05}
  name CurveTool
  xpos 70
  ypos 1424
 }
push $Nda089400
 Dot {
  name Dot16
  xpos -336
  ypos 522
 }
 CurveTool {
  operation "Max Luma Pixel"
  channels {-rgba.red -rgba.green rgba.blue none}
  ROI {0 0 {width} {height}}
  maxlumapixdata {1615 1377}
  maxlumapixvalue {0 0 0.7671891451}
  minlumapixdata {2217 1421}
  minlumapixvalue {0 0 0.022330679}
  name CurveTool_Range
  xpos -370
  ypos 680
 }
 Sampler {
  inputs 0
  lut {red {curve x-0.00129738648 0.0004619613512 x0.004756283015 0.001077158207 x0.0114454627 0.001517618162 x0.0210336335 0.001734140639 x0.03559751064 0.002015487887 x0.0549335964 0.002322730156 x0.08466690034 0.002795656079 x0.1286601722 0.003332371009 x0.1955251396 0.003984032798 x0.2936187088 0.005189135353 x0.4359943867 0.006359773309 x0.6449226737 0.007640293929 x1.001508474 0.009878930427 x1.439012408 0.01194134237 x2.035475969 0.01429124091 x2.869958878 0.01692831493 x4.392919064 0.01519097237}
    green {curve x0.001124689123 0.0003707262828 x0.005543645471 0.0008138821936 x0.01218412165 0.001073437026 x0.02027095109 0.001233354775 x0.03088484518 0.001416135146 x0.046778135 0.00164298646 x0.06654781103 0.001907029808 x0.09679172188 0.002264398615 x0.1374035776 0.002616018609 x0.197443381 0.003076118258 x0.2674979866 0.003730817156 x0.3883931339 0.004492661408 x0.5378844142 0.005266147575 x0.7437391877 0.006192660042 x1.018028259 0.007629574624 x1.480698586 0.00961079623 x1.96530664 0.01108431803 x2.687412977 0.01298491224 x3.637326002 0.0160534057 x4.758426189 0.01931650858}
    blue {curve x-0.003951828461 0.001486278929 x0.002557906788 0.00171180174 x0.008008017205 0.002017349813 x0.01558723766 0.002199311433 x0.0264222268 0.002437282333 x0.04116715863 0.002743406285 x0.06253861636 0.003170380845 x0.09374909848 0.003676329491 x0.1383087933 0.004257126468 x0.2018537819 0.004945307262 x0.2908417583 0.006149138727 x0.4180861413 0.007349811771 x0.6079242826 0.008924463377 x0.8944081068 0.01085406252 x1.257538915 0.01370882032 x1.837058663 0.01692804208 x2.533459187 0.01924591852 x3.563607931 0.02243584382 x5.44906044 0.03097368827}}
  name Sampler1
  onCreate "n = nuke.thisNode()\nn\['sampler'].setEnabled(False)"
  knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\np = nuke.thisParent()\n\nif k.name() == 'lut':\n    with p:\n        for c in \['ColorLookup1','ColorLookup2']:\n           nuke.toNode(c)\['lut'].fromScript(k.toScript())"
  xpos 840
  ypos 1502
 }
push $Nda03a400
 Dot {
  name Dot51
  xpos 115
  ypos -726
 }
 Input {
  inputs 0
  name COMP
  label "\[value number]"
  note_font_size 30
  xpos 950
  ypos -896
 }
 Dot {
  name Dot49
  xpos 984
  ypos -605
 }
set Nda098800 [stack 0]
 Switch {
  inputs 2
  which {{parent.meta}}
  name Switch1
  xpos 81
  ypos -609
 }
 Dot {
  name Dot54
  xpos 115
  ypos -486
 }
 Dot {
  name Dot52
  xpos -685
  ypos -486
 }
 Dot {
  name Dot53
  xpos -685
  ypos 3762
 }
push $Nda081400
 Dot {
  name Dot40
  xpos 874
  ypos 258
 }
push $Nda072c00
 Dot {
  name Dot34
  xpos 624
  ypos 378
 }
 Multiply {
  inputs 1+1
  channels rgb
  value 0
  maskChannelMask -rgba.red
  name Multiply1
  xpos 840
  ypos 374
 }
push $Nda098800
 OCIOColorSpace {
  in_colorspace {{OCIOColorSpace1.in_colorspace}}
  out_colorspace {{OCIOColorSpace1.out_colorspace}}
  name OCIOColorSpace3
  xpos 950
  ypos -490
 }
 Dot {
  name Dot44
  xpos 984
  ypos -390
 }
set Nda097400 [stack 0]
 Merge2 {
  inputs 2
  operation from
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge8
  xpos 950
  ypos 374
  disable {{"Multiply6.value.r == 0"}}
 }
 Dot {
  name Dot18
  xpos 984
  ypos 2658
 }
set Nda0a6a00 [stack 0]
 ColorLookup {
  lut {master {}
    red {curve x-0.00129738648 0.0004619613512 x0.004756283015 0.001077158207 x0.0114454627 0.001517618162 x0.0210336335 0.001734140639 x0.03559751064 0.002015487887 x0.0549335964 0.002322730156 x0.08466690034 0.002795656079 x0.1286601722 0.003332371009 x0.1955251396 0.003984032798 x0.2936187088 0.005189135353 x0.4359943867 0.006359773309 x0.6449226737 0.007640293929 x1.001508474 0.009878930427 x1.439012408 0.01194134237 x2.035475969 0.01429124091 x2.869958878 0.01692831493 x4.392919064 0.01519097237}
    green {curve x0.001124689123 0.0003707262828 x0.005543645471 0.0008138821936 x0.01218412165 0.001073437026 x0.02027095109 0.001233354775 x0.03088484518 0.001416135146 x0.046778135 0.00164298646 x0.06654781103 0.001907029808 x0.09679172188 0.002264398615 x0.1374035776 0.002616018609 x0.197443381 0.003076118258 x0.2674979866 0.003730817156 x0.3883931339 0.004492661408 x0.5378844142 0.005266147575 x0.7437391877 0.006192660042 x1.018028259 0.007629574624 x1.480698586 0.00961079623 x1.96530664 0.01108431803 x2.687412977 0.01298491224 x3.637326002 0.0160534057 x4.758426189 0.01931650858}
    blue {curve x-0.003951828461 0.001486278929 x0.002557906788 0.00171180174 x0.008008017205 0.002017349813 x0.01558723766 0.002199311433 x0.0264222268 0.002437282333 x0.04116715863 0.002743406285 x0.06253861636 0.003170380845 x0.09374909848 0.003676329491 x0.1383087933 0.004257126468 x0.2018537819 0.004945307262 x0.2908417583 0.006149138727 x0.4180861413 0.007349811771 x0.6079242826 0.008924463377 x0.8944081068 0.01085406252 x1.257538915 0.01370882032 x1.837058663 0.01692804208 x2.533459187 0.01924591852 x3.563607931 0.02243584382 x5.44906044 0.03097368827}
    alpha {}}
  name ColorLookup2
  xpos 730
  ypos 2654
 }
push $Nda081800
 Dot {
  name Dot38
  xpos 1204
  ypos 1842
 }
 Dot {
  name Dot37
  xpos 544
  ypos 1842
 }
 Dot {
  name Dot22
  xpos 544
  ypos 2271
 }
set Nda0b6600 [stack 0]
 Dot {
  name Dot20
  xpos 544
  ypos 2391
 }
push $Nda0b6600
 Dot {
  name Dot17
  xpos 434
  ypos 2271
 }
set Nda0bb600 [stack 0]
 Dot {
  name Dot13
  xpos 214
  ypos 2271
 }
 Input {
  inputs 0
  name external_grain
  label "\[value number]"
  note_font_size 30
  xpos -150
  ypos 1716
  number 4
 }
 Dot {
  name Dot21
  xpos -116
  ypos 1938
 }
push $Nda080c00
 ColorLookup {
  channels rgb
  lut {master {}
    red {curve x-0.00129738648 0.0004619613512 x0.004756283015 0.001077158207 x0.0114454627 0.001517618162 x0.0210336335 0.001734140639 x0.03559751064 0.002015487887 x0.0549335964 0.002322730156 x0.08466690034 0.002795656079 x0.1286601722 0.003332371009 x0.1955251396 0.003984032798 x0.2936187088 0.005189135353 x0.4359943867 0.006359773309 x0.6449226737 0.007640293929 x1.001508474 0.009878930427 x1.439012408 0.01194134237 x2.035475969 0.01429124091 x2.869958878 0.01692831493 x4.392919064 0.01519097237}
    green {curve x0.001124689123 0.0003707262828 x0.005543645471 0.0008138821936 x0.01218412165 0.001073437026 x0.02027095109 0.001233354775 x0.03088484518 0.001416135146 x0.046778135 0.00164298646 x0.06654781103 0.001907029808 x0.09679172188 0.002264398615 x0.1374035776 0.002616018609 x0.197443381 0.003076118258 x0.2674979866 0.003730817156 x0.3883931339 0.004492661408 x0.5378844142 0.005266147575 x0.7437391877 0.006192660042 x1.018028259 0.007629574624 x1.480698586 0.00961079623 x1.96530664 0.01108431803 x2.687412977 0.01298491224 x3.637326002 0.0160534057 x4.758426189 0.01931650858}
    blue {curve x-0.003951828461 0.001486278929 x0.002557906788 0.00171180174 x0.008008017205 0.002017349813 x0.01558723766 0.002199311433 x0.0264222268 0.002437282333 x0.04116715863 0.002743406285 x0.06253861636 0.003170380845 x0.09374909848 0.003676329491 x0.1383087933 0.004257126468 x0.2018537819 0.004945307262 x0.2908417583 0.006149138727 x0.4180861413 0.007349811771 x0.6079242826 0.008924463377 x0.8944081068 0.01085406252 x1.257538915 0.01370882032 x1.837058663 0.01692804208 x2.533459187 0.01924591852 x3.563607931 0.02243584382 x5.44906044 0.03097368827}
    alpha {}}
  name ColorLookup1
  xpos 730
  ypos 1502
 }
 Dot {
  name Dot24
  xpos 764
  ypos 1746
 }
push $Nda082400
 Dot {
  name Dot33
  xpos 324
  ypos 1386
 }
 MergeExpression {
  inputs 2
  temp_name0 target
  temp_expr0 .01
  expr0 "Br * (target / Ar)"
  expr1 "Bg * (target / Ag)"
  expr2 "Bb * (target / Ab)"
  channel3 none
  name MergeExpression1
  xpos 290
  ypos 1742
 }
 Dot {
  name Dot15
  xpos 324
  ypos 1842
 }
set Nda0ad600 [stack 0]
 Dot {
  name Dot25
  xpos 104
  ypos 1842
 }
 Switch {
  inputs 2
  which {{parent.external_grain}}
  name Switch2
  xpos 70
  ypos 1934
 }
 Group {
  name VoronoiScatter
  xpos 70
  ypos 2102
  disable {{!parent.scatter}}
  addUserKnob {20 User}
  addUserKnob {41 useGPUIfAvailable l "Use GPU if available" T VoroNoise.useGPUIfAvailable}
  addUserKnob {41 vectorize l "Vectorize on CPU" -STARTLINE T VoroNoise.vectorize}
  addUserKnob {15 box}
  box {{parent.box x1004 0 x1036 -75} {parent.box x1004 100 x1036 120} {parent.box x1004 496 x1036 325} {parent.box x1004 916 x1036 320}}
  addUserKnob {3 sample_frame l "sample frame"}
  sample_frame {{parent.sample_frame}}
  addUserKnob {7 cell_size l "cell size" R 0 100}
  cell_size {{parent.cell_size}}
  addUserKnob {6 overlay_pattern l "overlay pattern" -STARTLINE}
  overlay_pattern {{parent.overlay}}
  addUserKnob {3 edge_blend_size l "edge blend size"}
  edge_blend_size {{parent.edge_blend_size}}
  addUserKnob {7 amplitude R 0 100}
  amplitude {{parent.amplitude}}
  addUserKnob {7 frequency R 0 100}
  frequency {{parent.frequency}}
  addUserKnob {41 VoroNoise_Seed l Seed T VoroNoise.VoroNoise_Seed}
 }
  Input {
   inputs 0
   name Input1
   xpos 180
   ypos -879
  }
  Dot {
   name Dot14
   xpos 214
   ypos -750
  }
set Nda0c4800 [stack 0]
  Dot {
   name Dot16
   xpos 434
   ypos -750
  }
  Remove {
   name Remove1
   xpos 400
   ypos -687
  }
  Dot {
   name Dot6
   xpos 434
   ypos -606
  }
set Nda0c5400 [stack 0]
  Dot {
   name Dot15
   xpos 654
   ypos -606
  }
set Nda0c5800 [stack 0]
  Dot {
   name Dot7
   xpos 874
   ypos -606
  }
  Noise {
   output {rgba.red -rgba.green -rgba.blue none}
   replace true
   size {{parent.frequency} {"parent.frequency * pixel_aspect"}}
   zoffset {{"x + 1000"}}
   gamma 1
   name Noise1
   xpos 840
   ypos -514
  }
  Noise {
   output {-rgba.red rgba.green -rgba.blue none}
   replace true
   size {{parent.Noise1.size} {parent.Noise1.size}}
   zoffset {{x}}
   gamma 1
   name Noise2
   xpos 840
   ypos -466
  }
  Clamp {
   name Clamp1
   xpos 840
   ypos -424
  }
  Dot {
   name Dot11
   xpos 874
   ypos -366
  }
push $Nda0c5800
  BlinkScript {
   ProgramGroup 1
   KernelDescription "2 \"VoroNoise\" iterate pixelWise c117be128a07c11b6d82fd34148d66b3bcac41976ec9c2082affe38e890c2c0f 2 \"src\" Read Point \"dst\" Write Point 6 \"Frequency\" Float 1 AABIQg== \"Seed\" Int 1 AAAAAA== \"aspect ratio\" Float 1 AACAPw== \"width\" Int 1 AAAAAA== \"height\" Int 1 AAAAAA== \"Randomness\" Float 1 AAAAPw== 6 \"frequency\" 1 1 \"seed\" 1 1 \"aspect_ratio\" 1 1 \"width\" 1 1 \"height\" 1 1 \"randomness\" 1 1 0"
   kernelSource "// Voronoi.blink\n// A test implementation of libNoise's Voronoi generator using Blink\n// Ivan Busquets - August 2013\n// Modified for DasGrain by Fabian Holtz - April 2019\n\n#define X_NOISE_GEN  1619\n#define Y_NOISE_GEN  31337\n#define Z_NOISE_GEN  6971\n#define SEED_NOISE_GEN  1013\n#define SQRT_3 1.73205081\n\ninline int IntValueNoise3D (int x, int y, int z, int seed)\n\{\n  // All constants are primes and must remain prime in order for this noise\n  // function to work correctly.\n  int n = (\n      X_NOISE_GEN    * x\n    + Y_NOISE_GEN    * y\n    + Z_NOISE_GEN    * z\n    + SEED_NOISE_GEN * seed)\n    & 0x7fffffff;\n  n = (n >> 13) ^ n;\n  return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n\}\n\ninline float ValueNoise3D (int x, int y, int z, int seed)\n\{\n  return 1.0 - ((float)IntValueNoise3D (x, y, z, seed) / 1073741824.0);\n\}\n\nkernel VoroNoise : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead> src;\n  Image<eWrite, eAccessPoint> dst;\n\nparam:\n  float frequency;\n  int seed;\n  float aspect_ratio;\n  int width;\n  int height;\n  float randomness;\n\n\n  void define() \{\n    defineParam(frequency, \"Frequency\", 50.0f);\n    defineParam(aspect_ratio, \"aspect ratio\", 1.0f);\n    defineParam(seed, \"Seed\", 0);\n    defineParam(randomness, \"Randomness\", 0.5f);\n  \}\n\n\n\n\n  void process(int2 pos) \{\n   float x = pos.x * aspect_ratio * frequency / width;\n   float y = pos.y * frequency / width;\n   int xInt = (x > 0.0) ? x : x - 1;\n   int yInt = (y > 0.0) ? y : y - 1;\n\n\n    float minDist = 2147483647.0;\n    float xCandidate = 0;\n    float yCandidate = 0;\n\n    float dist;\n\nfor (int yCur = yInt - 2; yCur <= yInt + 2; yCur++) \{\n      for (int xCur = xInt - 2; xCur <= xInt + 2; xCur++) \{\n\n        // Calculate the position and distance to the seed point inside of\n        // this unit cube. Limited by the randomness value\n        float xPos = xCur + (ValueNoise3D (xCur, yCur, 0, seed    ) + 1 ) * randomness + (1-randomness) - 1;\n        float yPos = yCur + (ValueNoise3D (xCur, yCur, 0, seed + 1) + 1 ) * randomness + (1-randomness) - 1;\n\n        float xDist = xPos - x;\n        float yDist = yPos - y;\n\n        dist = pow(xDist, 2) + pow(yDist, 2);\n        if (dist < minDist) \{\n          // This seed point is closer to any others found so far, so record\n          // this seed point.\n          minDist = dist;\n          xCandidate = xPos;\n          yCandidate = yPos;\n\t\}\n    \}\n\}\n\n    SampleType(dst) sample(0.0f);\n\n    sample.x = xCandidate / aspect_ratio / frequency;\n    sample.y = yCandidate / height * width / frequency;\n    sample.z = 0;\n\n    dst() = sample;\n\}\n\};"
   rebuild ""
   VoroNoise_Frequency {{"width / parent.cell_size"}}
   VoroNoise_Seed {{"(x + (parent.parent.stereo == 2 ? \[lsearch \[value root.views] \[view]] / 2 : 0)) * 5"}}
   "VoroNoise_aspect ratio" {{pixel_aspect}}
   VoroNoise_width {{width}}
   VoroNoise_height {{height}}
   rebuild_finalise ""
   name VoroNoise
   xpos 620
   ypos -520
  }
  Copy {
   inputs 2
   from0 rgba.red
   to0 forward.u
   from1 rgba.green
   to1 forward.v
   name Copy1
   xpos 620
   ypos -382
   disable {{"parent.amplitude == 0"}}
  }
  IDistort {
   uv forward
   uv_offset 0.5
   uv_scale {{parent.amplitude} {"uv_scale.w * pixel_aspect"}}
   filter impulse
   name IDistort1
   xpos 620
   ypos -280
   disable {{"parent.amplitude == 0"}}
  }
  Dot {
   name Dot5
   xpos 654
   ypos -246
  }
  NoTimeBlur {
   rounding floor
   name NoTimeBlur3
   xpos 620
   ypos -154
  }
  Transform {
   translate {{"floor((x * size) % 1 * (size)) - int(size / 2)"} {"floor(x % 1 * (size)) - int(size/2)"}}
   filter impulse
   black_outside false
   name Transform1
   xpos 620
   ypos -58
   disable {{"parent.edge_blend_size < 1"}}
   addUserKnob {20 User}
   addUserKnob {3 size}
   size {{"parent.edge_blend_size + 1"}}
  }
  Dot {
   name Dot9
   xpos 654
   ypos 42
  }
set Nd9816000 [stack 0]
push $Nda0c5400
  Expression {
   expr0 "(x + .5) / width"
   expr1 "(y + .5) / height"
   expr2 0
   name STMapGenerator
   xpos 400
   ypos -514
  }
  NoTimeBlur {
   rounding floor
   name NoTimeBlur2
   xpos 400
   ypos -154
  }
  Merge2 {
   inputs 2
   operation from
   Achannels {rgba.red rgba.green -rgba.blue none}
   Bchannels {rgba.red rgba.green -rgba.blue none}
   output {rgba.red rgba.green -rgba.blue none}
   name Merge2
   xpos 400
   ypos 38
  }
  Dot {
   name Dot10
   xpos 434
   ypos 210
  }
push $Nd9816000
  Expression {
   temp_name0 view_index
   temp_expr0 "parent.parent.stereo == 1 ? \[lsearch \[value root.views] \[view]] / 2 : 0"
   expr0 "random((r + view_index) * 1000000, 0) * (maxx - minx) + minx"
   expr1 "random((g + view_index) * 1000000, 0) * (maxy - miny) + miny"
   channel2 none
   channel3 none
   name Expression3
   xpos 620
   ypos 110
   addUserKnob {20 User}
   addUserKnob {7 frequency R 0 100}
   frequency {{parent.parent.cell_size}}
   addUserKnob {7 multiplier R 0 3}
   multiplier 0.5
   addUserKnob {15 shrink}
   shrink {{"frequency * multiplier + ceil(parent.edge_blend_size / 2) + IDistort1.uv_scale.w / 2"} {"frequency * multiplier + ceil(parent.edge_blend_size / 2) + IDistort1.uv_scale.h / 2"} {"frequency * multiplier + floor(parent.edge_blend_size / 2) + IDistort1.uv_scale.w / 2"} {"frequency * multiplier + floor(parent.edge_blend_size / 2) + IDistort1.uv_scale.h / 2"}}
   addUserKnob {26 ""}
   addUserKnob {7 minx}
   minx {{"(parent.box.x + shrink.x + .5) / width"}}
   addUserKnob {7 maxx}
   maxx {{"(parent.box.r - shrink.r - .5) / width"}}
   addUserKnob {7 miny}
   miny {{"(parent.box.y + shrink.y + .5) / height"}}
   addUserKnob {7 maxy}
   maxy {{"(parent.box.t - shrink.t - .5) / height"}}
  }
  Merge2 {
   inputs 2
   operation plus
   Achannels {rgba.red rgba.green -rgba.blue none}
   Bchannels {rgba.red rgba.green -rgba.blue none}
   output {rgba.red rgba.green -rgba.blue none}
   name Merge3
   xpos 620
   ypos 206
  }
  Expression {
   expr0 "(r + (maxx - minx) - minx) % (maxx - minx) + minx"
   expr1 "(g + (maxy - miny) - miny) % (maxy - miny) + miny"
   channel2 none
   channel3 none
   name Expression7
   xpos 620
   ypos 278
   addUserKnob {20 User}
   addUserKnob {7 minx}
   minx {{"(parent.box.x + rint(x % 1 * parent.edge_blend_size) + .5) / width"}}
   addUserKnob {7 maxx}
   maxx {{"(parent.box.r + rint(x % 1 * parent.edge_blend_size) - .5) / width"}}
   addUserKnob {7 miny}
   miny {{"(parent.box.y + rint(x % 1 * parent.edge_blend_size) + .5) / height"}}
   addUserKnob {7 maxy}
   maxy {{"(parent.box.t + rint(x % 1 * parent.edge_blend_size) - .5) / height"}}
  }
  Dot {
   name Dot3
   xpos 654
   ypos 354
  }
set Nd9817e00 [stack 0]
  Dot {
   name Dot13
   xpos 654
   ypos 546
  }
push $Nd9817e00
  Dot {
   name Dot8
   xpos 874
   ypos 354
  }
  Blur {
   channels rgb
   size {{pixel_aspect} 1}
   name Blur1
   label "\[value size]"
   xpos 840
   ypos 440
  }
  Difference {
   inputs 2
   name Difference2
   xpos 840
   ypos 536
  }
  Expression {
   channel0 {none none none rgba.alpha}
   expr0 "a > 1e-9"
   channel1 none
   channel2 none
   channel3 none
   name Expression2
   xpos 840
   ypos 614
  }
  Shuffle {
   red alpha
   green alpha
   blue alpha
   name Shuffle1
   label "\[value in]:\[value out]"
   xpos 840
   ypos 680
  }
  Dot {
   name Dot4
   xpos 874
   ypos 762
  }
push $Nd9817e00
push $Nda0c4800
  FrameHold {
   firstFrame {{parent.sample_frame}}
   name FrameHold1
   xpos 180
   ypos -256
  }
  NoTimeBlur {
   rounding floor
   name NoTimeBlur1
   xpos 180
   ypos -154
  }
  STMap {
   inputs 2
   channels rgb
   uv rgb
   filter impulse
   name STMap1
   xpos 180
   ypos 350
  }
set Nd988fc00 [stack 0]
  TimeBlur {
   divisions {{"max(Transform1.size == 1 ? 2 : pow2(Transform1.size), 1)"}}
   shutter 1
   shuttercustomoffset {{"1 / divisions / 2"}}
   name TimeBlur1
   xpos 180
   ypos 446
   disable {{"parent.edge_blend_size < 1"}}
  }
set Nd9890400 [stack 0]
push $Nd988fc00
  Dot {
   name Dot1
   xpos -6
   ypos 354
  }
  Difference {
   inputs 2
   name Difference1
   xpos -40
   ypos 440
  }
  Expression {
   channel0 {none none none rgba.alpha}
   expr0 "a > 1e-10"
   channel1 none
   channel2 none
   channel3 none
   name Expression1
   xpos -40
   ypos 494
  }
  Blur {
   channels alpha
   size {{parent.parent.edge_blend_size}}
   name Blur2
   xpos -40
   ypos 536
  }
  Grade {
   channels alpha
   blackpoint 0.5
   white_clamp true
   name Grade2
   xpos -40
   ypos 584
  }
  Dot {
   name Dot2
   xpos -6
   ypos 666
  }
push $Nd9890400
  Grade {
   inputs 1+1
   white 1.4
   black_clamp false
   name Grade1
   xpos 180
   ypos 662
   disable {{"parent.edge_blend_size < 1"}}
  }
  Merge2 {
   inputs 2
   Achannels rgb
   Bchannels rgb
   output rgb
   name Merge1
   xpos 180
   ypos 758
   disable {{!parent.overlay_pattern}}
  }
  Assert {
   expression {{"Expression3.maxx > Expression3.minx && Expression3.maxy > Expression3.miny"}}
   message "increase sample box size or decrease cell size"
   name error
   xpos 180
   ypos 854
  }
  Output {
   name Output1
   xpos 180
   ypos 950
  }
 end_group
 Multiply {
  inputs 1+1
  channels rgb
  value 1.8
  maskChannelMask {{{parent.Merge9.maskChannelMask}}}
  invert_mask {{!Merge9.invert_mask}}
  name Multiply7
  xpos 70
  ypos 2315
  disable {{"!maskChannelMask || !\[exists parent.input3.name]"}}
 }
 Dot {
  name Dot23
  xpos 104
  ypos 2391
 }
push $Nda0bb600
push $Nda0ad600
 Multiply {
  inputs 1+1
  channels rgb
  value 1.8
  maskChannelMask {{{parent.Merge9.maskChannelMask}}}
  invert_mask {{parent.Merge9.invert_mask}}
  name Multiply2
  xpos 290
  ypos 2315
  disable {{"!maskChannelMask || (!parent.scatter && !parent.external_grain)"}}
 }
 Merge2 {
  inputs 2+1
  operation copy
  Achannels rgb
  Bchannels rgb
  output rgb
  maskChannelMask -rgba.alpha
  name Merge9
  xpos 290
  ypos 2387
  disable {{"!(parent.scatter || parent.external_grain)"}}
 }
 Dot {
  name Dot11
  xpos 324
  ypos 2490
 }
set Nd989cc00 [stack 0]
 MergeExpression {
  inputs 2
  temp_name0 reverse
  temp_expr0 "1 / MergeExpression1.temp_expr0"
  expr0 "Br * Ar * reverse"
  expr1 "Bg * Ag * reverse"
  expr2 "Bb * Ab * reverse"
  name MergeExpression2
  xpos 290
  ypos 2654
 }
 Dot {
  name Dot8
  xpos 324
  ypos 2850
 }
push $Nda0a6a00
 Merge2 {
  inputs 2
  operation plus
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge3
  xpos 950
  ypos 2846
 }
 Dot {
  name Dot42
  xpos 984
  ypos 3018
 }
set Nd989e400 [stack 0]
 OCIOColorSpace {
  in_colorspace {{OCIOColorSpace1.out_colorspace}}
  out_colorspace {{OCIOColorSpace1.in_colorspace}}
  name OCIOColorSpace4
  xpos 950
  ypos 3086
 }
 Dot {
  name Dot19
  xpos 984
  ypos 3162
 }
set Nd98aa800 [stack 0]
 Dot {
  name Dot41
  xpos 1204
  ypos 3162
 }
set Nd98a6000 [stack 0]
 Dot {
  name Dot36
  xpos 1314
  ypos 3162
 }
 Blur {
  channels rgb
  size 1
  name Blur1
  xpos 1280
  ypos 3254
 }
push $Nd98a6000
 Merge2 {
  inputs 2
  operation difference
  bbox B
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge10
  xpos 1170
  ypos 3254
 }
 Multiply {
  channels rgb
  value 50
  name Multiply3
  xpos 1170
  ypos 3302
 }
 Dot {
  name Dot43
  xpos 1204
  ypos 3402
 }
push $Nda097400
 Dot {
  name Dot45
  xpos 1424
  ypos -390
 }
push $Nd989e400
 Merge2 {
  inputs 2
  operation from
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge11
  xpos 1390
  ypos 3014
 }
 Dot {
  name Dot46
  xpos 1424
  ypos 3522
 }
push $Nd989cc00
 Dot {
  name Dot14
  xpos 104
  ypos 2490
 }
 Dot {
  name Dot12
  xpos 104
  ypos 3402
 }
push $Nda15ac00
 Dot {
  name Dot47
  xpos -556
  ypos -390
 }
push $Nda069400
 Merge2 {
  inputs 2
  operation from
  Achannels rgb
  Bchannels rgb
  output rgb
  name Merge12
  xpos -590
  ypos -202
 }
 Dot {
  name Dot10
  xpos -556
  ypos 3522
 }
push $Nd98aa800
 Switch {
  inputs 5
  which {{output}}
  name Output
  xpos 950
  ypos 3656
  addUserKnob {20 User}
  addUserKnob {4 output M {"regrained comp" "plate grain" "normalised grain" "adapted grain" "grain QC"}}
 }
 CopyMetaData {
  inputs 2
  mergeMode "Meta only"
  name CopyMetaData1
  xpos 950
  ypos 3758
 }
 Output {
  name Output1
  xpos 950
  ypos 3854
 }
end_group
Dot {
 name Dot4
 note_font "Bitstream Vera Sans Bold"
 note_font_size 22
 xpos -3453
 ypos 2873
}
set Nd98b7a00 [stack 0]
Dot {
 name Dot18
 note_font "Bitstream Vera Sans Bold"
 note_font_size 22
 xpos -3769
 ypos 2873
}
Dot {
 name Dot6
 note_font "Bitstream Vera Sans Bold"
 note_font_size 22
 xpos -3879
 ypos 2873
}
set Nd98b8800 [stack 0]
Dot {
 name Dot7
 note_font "Bitstream Vera Sans Bold"
 note_font_size 22
 xpos -4041
 ypos 2873
}
set Nd98b8c00 [stack 0]
Dot {
 name Dot10
 note_font "Bitstream Vera Sans Bold"
 note_font_size 22
 xpos -4173
 ypos 2873
}
set Nd98b9000 [stack 0]
push $Nd9b2e400
NoOp {
 name Stamp2
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated Sep 27 2019"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -4270
 ypos 2923
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T Plate}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 advanced_reconnection 1
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_20d5136be1
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated Sep 27 2019." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.0</big></b></a>"}
}
Group {
 inputs 2
 name bm_MatteCheck1
 help "A simple tool designed to check the accuracy of mattes. Choose between overlaying a red color, viewing the matte against a grey background, or viewing the matte against a checkerboard."
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() in ('Type', 'showPanel'):\n    Type = n\['Type'].value()\n    if Type == 'Colour Overlay':\n\n        n\['overlayColour'].setVisible(True)\n        n\['overlayMix'].setVisible(True)\n        n\['greyAmt'].setVisible(False)\n        n\['chkSize'].setVisible(False)\n        n\['chkContrast'].setVisible(False)\n\n    elif Type == 'Grey Background':\n\n        n\['overlayColour'].setVisible(False)\n        n\['overlayMix'].setVisible(False)\n        n\['greyAmt'].setVisible(True)\n        n\['chkSize'].setVisible(False)\n        n\['chkContrast'].setVisible(False)\n\n    elif Type == 'Checkerboard':\n\n        n\['overlayColour'].setVisible(False)\n        n\['overlayMix'].setVisible(False)\n        n\['greyAmt'].setVisible(False)\n        n\['chkSize'].setVisible(True)\n        n\['chkContrast'].setVisible(True)"
 tile_color 0x232323ff
 note_font Verdana
 xpos -4208
 ypos 2973
 mapsize {0.15 0.15}
 addUserKnob {20 Options}
 addUserKnob {26 ""}
 addUserKnob {4 Type t "Choose between a colour overlay, or placing your matte over a grey background." M {"Colour Overlay" "Grey Background" Checkerboard "" "" "" "" "" "" "" "" ""}}
 Type "Grey Background"
 addUserKnob {26 ""}
 addUserKnob {18 overlayColour l "Overlay Colour" +HIDDEN}
 overlayColour {1 0 0}
 addUserKnob {6 overlayColour_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 overlayMix l "Overlay Mix" +HIDDEN}
 overlayMix 0.5
 addUserKnob {7 chkSize l Size +HIDDEN R 0 64}
 chkSize 17
 addUserKnob {7 chkContrast l Contrast +HIDDEN}
 chkContrast 0.27
 addUserKnob {18 greyAmt l "Grey Value" t "Brightness of the grey backdrop."}
 greyAmt 0.18
 addUserKnob {6 greyAmt_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {20 infoTab l Info}
 addUserKnob {26 ""}
 addUserKnob {26 versionInfo l "" +STARTLINE T "\nCreated by Ben McEwan\nwww.benmcewan.com\n\nVersion 1.1\nLast Updated: January 23rd, 2018\n"}
 addUserKnob {26 ""}
}
 Input {
  inputs 0
  name matte
  xpos -97
  ypos -413
  number 1
 }
 AddChannels {
  channels rgba
  name AddChannels1
  xpos -97
  ypos -374
 }
 Dot {
  name Dot4
  xpos -63
  ypos -320
 }
set Nd98c4c00 [stack 0]
 Dot {
  name Dot6
  label "  "
  note_font "Arial Black"
  note_font_size 16
  xpos -63
  ypos -152
 }
push $Nd98c4c00
 Invert {
  channels alpha
  name Invert1
  xpos 76
  ypos -329
 }
set Nd98b9a00 [stack 0]
 Dot {
  name Dot5
  xpos 313
  ypos -320
 }
 CheckerBoard2 {
  inputs 0
  format {{{input.format}}}
  boxsize {{chkSize}}
  color0 {0.1000000015 0.1000000015 0.1000000015 1}
  color2 {0.1000000015 0.1000000015 0.1000000015 1}
  linecolor 0
  centerlinewidth 0
  name CheckerBoard1
  xpos 373
  ypos -483
 }
 ColorCorrect {
  contrast {{chkContrast}}
  name ColorCorrect1
  xpos 373
  ypos -389
 }
 Input {
  inputs 0
  name plate
  xpos -94
  ypos -495
 }
set Nd98d1000 [stack 0]
 Dot {
  name Dot2
  xpos 110
  ypos -492
 }
set Nd98bae00 [stack 0]
 Dot {
  name Dot7
  note_font_size 41
  xpos 203
  ypos -492
 }
set Nd98bb200 [stack 0]
 Dot {
  name Dot3
  xpos 313
  ypos -492
 }
 Keymix {
  inputs 3
  name Keymix3
  xpos 279
  ypos -395
 }
push $Nd98b9a00
push $Nd98bb200
 Remove {
  operation keep
  channels rgb
  name Remove1
  xpos 169
  ypos -455
 }
 Grade {
  multiply 0
  add {{parent.greyAmt} {parent.greyAmt} {parent.greyAmt} 0}
  name Grade1
  xpos 169
  ypos -431
 }
push $Nd98bae00
 Keymix {
  inputs 3
  name Keymix2
  xpos 76
  ypos -387
 }
push $Nd98c4c00
 Constant {
  inputs 0
  color {{overlayColour.r} {overlayColour.g} {overlayColour.b} {curve}}
  name Constant1
  xpos -345
  ypos -349
 }
push $Nd98d1000
 Dot {
  name Dot1
  xpos -172
  ypos -492
 }
 Keymix {
  inputs 3
  mix {{overlayMix}}
  name Keymix1
  xpos -206
  ypos -329
 }
 Switch {
  inputs 3
  which {{Type x1 1}}
  name typeSwitch1
  xpos -206
  ypos -231
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos -206
  ypos -162
 }
 Output {
  name Output1
  xpos -206
  ypos -80
 }
end_group
push $Nd98b8800
push $Nd9b2e400
NoOp {
 name Stamp12
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated Sep 27 2019"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -3988
 ypos 2909
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T Plate}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 advanced_reconnection 1
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_20d5136be1
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated Sep 27 2019." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.0</big></b></a>"}
}
Group {
 inputs 2
 name tech_check_tool1
 label "\[value view]"
 xpos -3914
 ypos 2956
 addUserKnob {20 User}
 addUserKnob {4 view M {Comp Plate Difference Edges "Low frequency" "High / Negative values" NaN "" "" "" ""}}
 view Edges
 addUserKnob {26 ""}
 addUserKnob {7 tolerance l "Difference tolerance"}
 tolerance 0.05
 addUserKnob {7 edge_size l "Edge Size" R 0 10}
 edge_size 73
 addUserKnob {7 low_freq_blur l "Low Frequncy blur" R 0 10}
 low_freq_blur 5
 addUserKnob {7 HighValue l "High Values cutoff"}
 HighValue 55
 addUserKnob {26 ""}
 addUserKnob {26 version l "" +STARTLINE T "Tech Check Tool v1.1 - Richard Frazer"}
}
 Input {
  inputs 0
  name COMP
  xpos -739
  ypos 452
  number 1
 }
 Dot {
  name Dot10
  xpos -705
  ypos 559
 }
set Nd98d7600 [stack 0]
 Dot {
  name Dot1
  xpos -836
  ypos 559
 }
set Nd98d7a00 [stack 0]
 Dot {
  name Dot5
  xpos -1121
  ypos 579
 }
 Dot {
  name Dot11
  xpos -1121
  ypos 648
 }
set Nd98d8200 [stack 0]
 Expression {
  temp_name0 thr
  temp_expr0 parent.HighValue
  expr0 isnan(r)
  expr1 isnan(g)
  expr2 isnan(b)
  name Expression4
  xpos -1502
  ypos 755
 }
 Expression {
  expr0 clamp(r+g+b)
  expr1 clamp(r+g+b)
  expr2 clamp(r+g+b)
  expr3 clamp(r+g+b)
  name Expression5
  xpos -1502
  ypos 804
 }
set Nd98d9c00 [stack 0]
 Dot {
  name Dot13
  xpos -1468
  ypos 1024
 }
push $Nd98d8200
 Expression {
  temp_name0 thr
  temp_expr0 parent.HighValue
  expr0 r>thr?1:0
  expr1 g>thr?1:0
  expr2 b>thr?1:0
  expr3 a>thr?1:0
  name Expression2
  xpos -1271
  ypos 739
 }
push $Nd98d8200
 Expression {
  expr0 r<0?1:0
  expr1 g<0?1:0
  expr2 b<0?1:0
  expr3 a>0.01?1:0
  name Expression1
  xpos -1155
  ypos 736
 }
 Merge2 {
  inputs 2
  operation plus
  name Merge3
  xpos -1155
  ypos 814
 }
set Nd98da800 [stack 0]
 Dot {
  name Dot7
  xpos -1121
  ypos 993
 }
push $Nd98d7a00
 Blur {
  size {{parent.low_freq_blur}}
  name Blur1
  xpos -978
  ypos 686
 }
push $Nd98d7a00
 Merge2 {
  inputs 2
  operation minus
  name Merge1
  xpos -870
  ypos 765
 }
 Dot {
  name Dot12
  xpos -836
  ypos 938
 }
push $Nd98d7600
 Dot {
  name Dot3
  xpos -552
  ypos 559
 }
set Nd98dd800 [stack 0]
 Input {
  inputs 0
  name PLATE
  xpos -126
  ypos 458
 }
 Dot {
  name Dot4
  xpos -83
  ypos 614
 }
set Nd98de000 [stack 0]
 Difference {
  inputs 2
  gain 100
  name Difference7
  xpos -462
  ypos 612
 }
 Expression {
  temp_name0 tol
  temp_expr0 parent.tolerance
  expr3 a>tol?1:0
  name Expression15
  xpos -462
  ypos 662
 }
 Shuffle {
  red alpha
  green black
  blue black
  name Shuffle7
  xpos -462
  ypos 707
 }
set Nd98dec00 [stack 0]
 EdgeDetectWrapper {
  name EdgeDetect1
  xpos -416
  ypos 759
 }
 FilterErode {
  size {{-parent.edge_size}}
  name FilterErode1
  xpos -416
  ypos 797
 }
push $Nd98dec00
 Merge2 {
  inputs 2
  name Merge2
  xpos -462
  ypos 865
 }
push $Nd98dd800
 Dot {
  name Dot2
  xpos -246
  ypos 559
 }
 ShuffleCopy {
  inputs 2
  name ShuffleCopy1
  xpos -280
  ypos 865
 }
 Premult {
  name Premult1
  xpos -280
  ypos 905
 }
 Dot {
  name Dot8
  xpos -246
  ypos 947
 }
push $Nd98dec00
push $Nd98dd800
 Merge2 {
  inputs 2
  operation screen
  name Merge7
  xpos -586
  ypos 754
 }
 Dot {
  name Dot9
  xpos -552
  ypos 952
 }
push $Nd98de000
 Dot {
  name Dot6
  xpos -83
  ypos 1014
 }
push $Nd98d7600
 Switch {
  inputs 7
  which {{parent.view}}
  name Switch1
  xpos -729
  ypos 1076
 }
 Output {
  name Output1
  xpos -729
  ypos 1159
 }
push $Nd98d9c00
push $Nd98da800
 Merge2 {
  inputs 2
  name Merge4
  xpos -1244
  ypos 883
 }
end_group
push $Nd98b8c00
Group {
 name D_QCTool1
 tile_color 0x349d83ff
 xpos -4076
 ypos 2967
 addUserKnob {20 QCTool}
 addUserKnob {4 Mode M {All Grain "Clipping Area" "Saturation Level" Luminace}}
 addUserKnob {6 Text +STARTLINE}
 Text true
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "D_QCTool v2.0 - (c) 2013 - Denis Scolan"}
}
 Input {
  inputs 0
  name Inputinput
  xpos -610
  ypos -1070
 }
 Dot {
  name Dot26
  xpos -576
  ypos -1030
 }
set Nd98ea600 [stack 0]
 Dot {
  name Dot27
  xpos -313
  ypos -916
 }
 Colorspace {
  colorspace_out YPbPr
  name Colorspace2
  xpos -347
  ypos -216
 }
 Shuffle {
  green red
  blue red
  alpha red
  name Shuffle5
  label LUMINACE
  xpos -347
  ypos -166
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message LUMINANCE
  old_message {{76 85 77 73 78 65 78 67 69}
    }
  box {0 0 {input.width} {input.height}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 9
  center {1079 450}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 900}
    }
  group_animations {{0} imported: 0 selected: 0 items: "root transform/"}
  animation_layers {{1 11 1079 450 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  name Text8
  xpos -347
  ypos -128
  disable {{1-Text}}
 }
set Nd98f1000 [stack 0]
push $Nd98ea600
 Dot {
  name Dot28
  xpos -478
  ypos -916
 }
 SoftClip {
  conversion "logarithmic compress"
  softclip_min 0.685
  name SoftClip2
  xpos -512
  ypos -255
 }
 Colorspace {
  colorspace_out HSL
  name Colorspace1
  xpos -512
  ypos -209
 }
 Shuffle {
  red green
  blue green
  alpha green
  name Shuffle6
  label SATURATION
  xpos -512
  ypos -164
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "SATURATION LEVEL"
  old_message {{83 65 84 85 82 65 84 73 79 78 32 76 69 86 69 76}
    }
  box {0 0 {input.width} {input.height}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 16
  center {1079 450}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 900}
    }
  group_animations {{0} imported: 0 selected: 0 items: "root transform/"}
  animation_layers {{1 11 1079 450 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  name Text7
  xpos -512
  ypos -108
  disable {{1-Text}}
 }
set Nd98fc000 [stack 0]
push $Nd98ea600
 Dot {
  name Dot29
  xpos -677
  ypos -916
 }
 Log2Lin {
  operation lin2log
  name Log2Lin5
  xpos -711
  ypos -277
 }
 ColorLookup {
  lut {master {curve L 10 x0 0 x1 1 x1 -0.1}
    red {}
    green {}
    blue {}
    alpha {}}
  name ColorLookup6
  xpos -711
  ypos -221
 }
 Log2Lin {
  name Log2Lin6
  xpos -711
  ypos -157
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "CLIPPING AREAS"
  old_message {{67 76 73 80 80 73 78 71 32 65 82 69 65 83}
    }
  box {0 0 {input.width} {input.height}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 14
  center {1079 450}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 900}
    }
  group_animations {{0} imported: 0 selected: 0 items: "root transform/"}
  animation_layers {{1 11 1079 450 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  name Text4
  xpos -711
  ypos -74
  disable {{1-Text}}
 }
set Nd9904600 [stack 0]
push $Nd98ea600
 Dot {
  name Dot30
  xpos -1326
  ypos -894
 }
set Nd9905400 [stack 0]
 Dot {
  name Dot4
  xpos -906
  ypos -620
 }
set Nd9908400 [stack 0]
 Dot {
  name Dot6
  xpos -805
  ypos -620
 }
 Dot {
  name Dot5
  xpos -805
  ypos -265
 }
push $Nd9908400
 Colorspace {
  name Colorspace4
  xpos -940
  ypos -514
 }
set Nd990a200 [stack 0]
push $Nd990a200
 Blur {
  size 1.7
  name Blur4
  xpos -895
  ypos -477
 }
 Merge2 {
  inputs 2
  operation minus
  name Merge2
  xpos -940
  ypos -422
 }
 Grade {
  white 500
  black_clamp false
  name Grade2
  xpos -940
  ypos -346
 }
 Saturation {
  saturation 3
  name Saturation2
  xpos -940
  ypos -303
 }
 ShuffleCopy {
  inputs 2
  name ShuffleCopy2
  xpos -940
  ypos -249
 }
push $Nd9905400
 Log2Lin {
  operation lin2log
  name Log2Lin4
  xpos -1204
  ypos -674
 }
 Dot {
  name Dot2
  xpos -1170
  ypos -621
 }
set Nd9916200 [stack 0]
 Dot {
  name Dot3
  xpos -1069
  ypos -621
 }
 Dot {
  name Dot1
  xpos -1069
  ypos -270
 }
push $Nd9916200
 Colorspace {
  colorspace_out Cineon
  name Colorspace3
  xpos -1204
  ypos -541
 }
set Nd9916e00 [stack 0]
push $Nd9916e00
 Blur {
  size 1.7
  name Blur2
  xpos -1159
  ypos -497
 }
 Merge2 {
  inputs 2
  operation minus
  name Merge1
  xpos -1204
  ypos -442
 }
 Grade {
  white 100
  black_clamp false
  name Grade1
  xpos -1204
  ypos -366
 }
 Saturation {
  saturation 3
  name Saturation1
  xpos -1204
  ypos -323
 }
 ShuffleCopy {
  inputs 2
  name ShuffleCopy1
  xpos -1204
  ypos -251
 }
 Merge2 {
  inputs 2
  operation max
  name Max
  xpos -1070
  ypos -154
 }
push $Nd9905400
 Merge2 {
  inputs 2
  operation plus
  name Plus3
  xpos -1360
  ypos -81
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message GRAIN
  old_message {{71 82 65 73 78}
    }
  box {0 0 {input.width} {input.height}}
  xjustify center
  yjustify bottom
  transforms {{0 2}
    }
  cursor_position 5
  center {1079 450}
  cursor_initialised true
  autofit_bbox false
  initial_cursor_position {{0 900}
    }
  group_animations {{0} imported: 0 selected: 0 items: "root transform/"}
  animation_layers {{1 11 1079 450 0 0 1 1 0 0 0 0}
    }
  color {1 1 0 1}
  name Text6
  xpos -1360
  ypos -48
  disable {{1-Text}}
 }
set Nd9922e00 [stack 0]
push $Nd98f1000
push $Nd98fc000
push $Nd9904600
push $Nd9922e00
 ContactSheet {
  inputs 4
  width {{input.width i}}
  height {{input.height i}}
  rows 2
  columns 2
  roworder TopBottom
  name ContactSheet1
  xpos -611
  ypos 101
 }
 Switch {
  inputs 5
  which {{Mode i}}
  name Switch1
  xpos -787
  ypos 101
 }
 Output {
  name Output1
  xpos -787
  ypos 201
 }
end_group
push $Nd98b9000
Dot {
 name Dot11
 note_font "Bitstream Vera Sans Bold"
 note_font_size 22
 xpos -4286
 ypos 2873
}
set Nd9927800 [stack 0]
Group {
 name NoiseQC1
 xpos -4320
 ypos 2969
}
 Input {
  inputs 0
  name Input1
  xpos -339
  ypos 498
 }
 Colorspace {
  colorspace_out sRGB
  name Colorspace4
  xpos -339
  ypos 538
 }
 Dot {
  name Dot51
  xpos -305
  ypos 590
 }
set Nd992ca00 [stack 0]
 Dot {
  name Dot52
  xpos -305
  ypos 616
 }
set Nd9929c00 [stack 0]
 Crop {
  box {0 0 {width} {height}}
  reformat true
  crop false
  name Crop3
  xpos -339
  ypos 665
 }
 Blur {
  size 1.4
  filter box
  quality 20
  crop false
  name Blur7
  selected true
  xpos -339
  ypos 721
 }
push $Nd992ca00
 Dot {
  name Dot35
  xpos -415
  ypos 590
 }
 Dot {
  name Dot53
  xpos -415
  ypos 806
 }
 Merge2 {
  inputs 2
  operation difference
  name Merge12
  xpos -339
  ypos 802
 }
 Multiply {
  value 50
  name Multiply5
  xpos -339
  ypos 922
 }
push $Nd9929c00
 Dot {
  name Dot55
  xpos -139
  ypos 616
 }
 Multiply {
  value 0.5
  name Multiply6
  xpos -173
  ypos 859
 }
 Merge2 {
  inputs 2
  operation plus
  name Plus2
  xpos -173
  ypos 928
 }
 Output {
  name Output1
  xpos -173
  ypos 1080
 }
end_group
push $Nd9927800
Dot {
 name Dot15
 note_font "Bitstream Vera Sans Bold"
 note_font_size 22
 xpos -4413
 ypos 2873
}
Group {
 name GW_GradeHelper_v1_1
 tile_color 0xd5733cff
 xpos -4447
 ypos 2974
 addUserKnob {20 User l Controls}
 addUserKnob {26 txt1 l "" +STARTLINE T "Gavdalf's Color Grade Matching Helper"}
 addUserKnob {26 ""}
 addUserKnob {4 choice l "Helper Selector Type" t "0 = no helper\n1 = Color Helper\n2 = Saturation Helper\n3 = Luma (Brightness) Helper" M {"0 = No Helper " "1 = Color Helper" "2 = Saturation Helper" "3 = Luma (Brightness Helper)" "" "" ""}}
 choice "1 = Color Helper"
 addUserKnob {26 ""}
 addUserKnob {26 txtdesc l "" +STARTLINE T "Choose Helper Filter Type:\n\n0 = no helper (no grade helper applied)\n\n1 = Color Helper (helps match color *hue only, not saturation or luminence*)\n*Try to align colors*\n\n2 = Saturation Helper (Helps to match Saturation)\n*For matching - Dark is Less saturated / Light = More saturated*\n\n3 = Luma (Brightness) Helper (Helps to match brightness)\n*Luma - for matching brighness, try to level out*"}
}
 Input {
  inputs 0
  name Input1
  xpos -820
  ypos -294
 }
 Dot {
  name Dot1_IN
  label IN
  note_font_size 33
  xpos -786
  ypos -200
 }
 Dot {
  name Dot7
  xpos -786
  ypos -122
 }
set Nd9934a00 [stack 0]
 Colorspace {
  channels {-rgba.red -rgba.green rgba.blue -rgba.alpha}
  colorspace_out HSL
  name Colorspace2
  xpos -392
  ypos 72
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 rgba.blue 0 2 rgba.blue 0 2 rgba.blue 0 2 rgba.red 0 0 black -1 -1 rgba.alpha 0 3 rgba.blue 0 2 rgba.green 0 1"
  name Shuffle2
  xpos -392
  ypos 123
 }
 Dot {
  name Dot1_Luma
  label Luma
  note_font_size 33
  xpos -358
  ypos 434
 }
push $Nd9934a00
 Colorspace {
  channels {-rgba.red rgba.green -rgba.blue -rgba.alpha}
  colorspace_out HSV
  name Colorspace6
  xpos -820
  ypos 72
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.alpha 0 3 rgba.green 0 1 rgba.red 0 0 rgba.green 0 1 rgba.blue 0 2 rgba.green 0 1 rgba.green 0 1"
  name Shuffle3
  selected true
  xpos -820
  ypos 115
 }
set Nd993be00 [stack 0]
 Dot {
  name Dot2_Sat
  label Saturation
  note_font_size 33
  xpos -786
  ypos 437
 }
push $Nd9934a00
 Colorspace {
  colorspace_out HSV
  name Colorspace3
  xpos -1291
  ypos 79
 }
 Constant {
  inputs 0
  channels rgb
  color 0.5
  name Constant2
  xpos -1123
  ypos 68
 }
 Colorspace {
  colorspace_out HSV
  name Colorspace4
  xpos -1123
  ypos 177
 }
 ShuffleCopy {
  inputs 2
  red red
  green green
  name ShuffleCopy1
  xpos -1291
  ypos 177
 }
 Colorspace {
  colorspace_in HSV
  name Colorspace5
  xpos -1291
  ypos 228
 }
 Saturation {
  saturation 4
  name Saturation2
  xpos -1291
  ypos 275
 }
 Dot {
  name Dot3_Color
  label Color
  note_font_size 33
  xpos -1256
  ypos 421
 }
push $Nd9934a00
 Dot {
  name Dot1
  xpos -1442
  ypos -122
 }
 Dot {
  name Dot2
  label NIL
  note_font_size 33
  xpos -1442
  ypos 631
 }
 Switch {
  inputs 4
  which {{parent.choice 3}}
  name Switch1
  xpos -820
  ypos 628
 }
 Dot {
  name Dot99_OUT
  label OUT
  note_font_size 33
  xpos -786
  ypos 840
 }
 Output {
  name Output1
  xpos -820
  ypos 932
 }
push $Nd993be00
push 0
push $Nd993be00
 Viewer {
  inputs 3
  frame_range 1-86
  name Viewer1
  xpos -12
  ypos 1252
 }
end_group
StickyNote {
 inputs 0
 name StickyNote8
 tile_color 0xffffffff
 label "<b>Elements In              ."
 note_font "Helvetica Bold"
 note_font_size 100
 xpos -5805
 ypos -1344
}
StickyNote {
 inputs 0
 name StickyNote2
 tile_color 0xffffffff
 label "<b>File In              ."
 note_font "Helvetica Bold"
 note_font_size 100
 xpos -3681
 ypos -1344
}
StickyNote {
 inputs 0
 name StickyNote4
 tile_color 0xffffffff
 label "<b>Camera Raw | Transcodes       \n"
 note_font "Helvetica Bold"
 note_font_size 100
 xpos -3664
 ypos -2262
}
push $Nda02ce00
PostageStamp {
 name Stamp9
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -3487
 ypos -53
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate-denoise
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T plate-denoise}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_1bc563a7f2
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
push $Nd9b2e400
NoOp {
 name Stamp6
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated Sep 27 2019"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -3629
 ypos 3494
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T Plate}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 advanced_reconnection 1
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_20d5136be1
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated Sep 27 2019." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.0</big></b></a>"}
}
push $Nd98b7a00
Dot {
 name Dot33
 xpos -3453
 ypos 2974
}
set Nd9965e00 [stack 0]
Crop {
 box {0 0 4096 2160}
 crop false
 name Crop2
 label "\[value box.r] x \[value box.t]\nblack outside: \[value crop]"
 note_font "Verdana Bold"
 note_font_size 12
 xpos -3487
 ypos 3326
}
Shuffle2 {
 fromInput1 {{0} B}
 fromInput2 {{0} B}
 mappings "4 rgba.red 0 0 rgba.red 0 0 rgba.green 0 1 rgba.green 0 1 rgba.blue 0 2 rgba.blue 0 2 white -1 -1 rgba.alpha 0 3"
 name Shuffle1
 label "Flood alpha to white"
 note_font "Verdana Bold"
 note_font_size 12
 xpos -3487
 ypos 3384
}
Remove {
 operation keep
 channels rgba
 name Remove2
 label "keep: \[value channels]"
 note_font "Verdana Bold"
 note_font_size 12
 xpos -3487
 ypos 3441
}
CopyMetaData {
 inputs 2
 name CopyMetaData1
 xpos -3487
 ypos 3499
}
Dot {
 name Dot5
 note_font_size 22
 xpos -3453
 ypos 3676
}
StickyNote {
 inputs 0
 name StickyNote1
 tile_color 0xffffffff
 label "<b>Geo + Cameras\n\n"
 note_font "Helvetica Bold"
 note_font_size 70
 xpos -1554
 ypos -1342
}
StickyNote {
 inputs 0
 name StickyNote9
 tile_color 0xffffffff
 label <b>Tracking
 note_font "Helvetica Bold"
 note_font_size 70
 xpos -268
 ypos -1336
}
push $Nd9b2e400
PostageStamp {
 name Stamp23
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font "Bitstream Vera Sans"
 note_font_size 20
 xpos -1302
 ypos -243
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T plate}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_20d5136be1
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
ViewMetaData {
 name ViewMetaData2
 label "\n\[metadata exr/hiero/clip]\n"
 xpos -1302
 ypos -177
}
push $Nd9965e00
Group {
 name Quality_Control_Tool1
 knobChanged "\n\ne = nuke.thisNode().knobs()\['extraControls'].value()\nv = nuke.thisNode().knobs()\['qhview'].getValue()\ng = nuke.thisNode().knobs()\['value']\ns = nuke.thisNode().knobs()\['size']\nc = nuke.thisNode().knobs()\['colours']\nebg = nuke.thisNode().knobs()\['edgebleedgamma']\n\nif e == 1:\n    if v == 0:\n        g.setVisible(True)\n        s.setVisible(False)\n        c.setVisible(False)\n        ebg.setVisible(False)\n    elif v == 1:\n        g.setVisible(False)\n        s.setVisible(True)\n        c.setVisible(False)\n        ebg.setVisible(False)\n    elif v == 2:\n        g.setVisible(False)\n        s.setVisible(False)\n        c.setVisible(True)\n        ebg.setVisible(True)\nelse:\n    g.setVisible(False)\n    s.setVisible(False)\n    c.setVisible(False)\n    ebg.setVisible(False)\n\nif v == 3:\n    nuke.thisNode().knobs()\['extraControls'].setVisible(False)\n    g.setVisible(False)\n    s.setVisible(False)\n    c.setVisible(False)\n    ebg.setVisible(False)\nelse:\n    nuke.thisNode().knobs()\['extraControls'].setVisible(True)\n\n"
 tile_color 0x989898ff
 note_font "Verdana Bold"
 note_font_color 0xaaff55ff
 xpos -3770
 ypos 2970
 addUserKnob {20 User l Main}
 addUserKnob {52 callBackInstructions l INVISIBLE +INVISIBLE T "n = nuke.selectedNode()\nn.knob('knobChanged').setValue(\n\ne = nuke.thisNode().knobs()\['extraControls'].value()\nv = nuke.thisNode().knobs()\['qhview'].getValue()\ng = nuke.thisNode().knobs()\['value']\ns = nuke.thisNode().knobs()\['size']\nc = nuke.thisNode().knobs()\['colours']\nebg = nuke.thisNode().knobs()\['edgebleedgamma']\n\nif e == 1:\n    if v == 0:\n        g.setVisible(True)\n        s.setVisible(False)\n        c.setVisible(False)\n        ebg.setVisible(False)\n    elif v == 1:\n        g.setVisible(False)\n        s.setVisible(True)\n        c.setVisible(False)\n        ebg.setVisible(False)\n    elif v == 2:\n        g.setVisible(False)\n        s.setVisible(False)\n        c.setVisible(True)\n        ebg.setVisible(True)\nelse:\n    g.setVisible(False)\n    s.setVisible(False)\n    c.setVisible(False)\n    ebg.setVisible(False)\n\nif v == 3:\n    nuke.thisNode().knobs()\['extraControls'].setVisible(False)\n    g.setVisible(False)\n    s.setVisible(False)\n    c.setVisible(False)\n    ebg.setVisible(False)\nelse:\n    nuke.thisNode().knobs()\['extraControls'].setVisible(True)\n\n) \n" +STARTLINE}
 addUserKnob {26 QH_checker l "" +STARTLINE T "<img src=\"S:/PRODUCTION/MOONRAKER/LOGO/Logo you'll need most of the time_lowRes3.png\">\nQH_checker"}
 addUserKnob {26 ""}
 addUserKnob {68 qhview l view M {Gamma Grain "Edge Bleeding" "Saturation Warnings" "" "" ""}}
 addUserKnob {6 extraControls l "extra controls" -STARTLINE}
 extraControls true
 addUserKnob {41 value T Gamma1.value}
 addUserKnob {41 size +HIDDEN T Blur1.size}
 addUserKnob {68 colours l "BG Colour" +HIDDEN M {White Blue Yellow Green "Checker board" "" "" ""}}
 colours Green
 addUserKnob {41 edgebleedgamma l gamma +HIDDEN T Gamma3.value}
}
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0xa8d647ff
  label "saturation warnings"
  note_font_size 20
  note_font_color 0x45571dff
  xpos -625
  ypos 238
  bdwidth 210
  bdheight 412
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0xa8d647ff
  label "edge bleeding checker"
  note_font_size 42
  note_font_color 0x45571dff
  xpos -246
  ypos 235
  bdwidth 565
  bdheight 419
 }
 BackdropNode {
  inputs 0
  name BackdropNode7
  tile_color 0xa8d647ff
  label "grain/noise checker"
  note_font_size 42
  note_font_color 0x45571dff
  xpos 453
  ypos 251
  bdwidth 365
  bdheight 420
 }
 BackdropNode {
  inputs 0
  name BackdropNode9
  tile_color 0xa8d647ff
  label "gamma check"
  note_font_size 42
  note_font_color 0x45571dff
  xpos 922
  ypos 251
  bdwidth 290
  bdheight 405
 }
 Input {
  inputs 0
  name Input1
  xpos 1009
  ypos 151
 }
 Dot {
  name Dot4
  xpos 1043
  ypos 191
 }
set Nda0d5800 [stack 0]
 Dot {
  name Dot5
  xpos 629
  ypos 184
 }
set Nda0d5c00 [stack 0]
 Dot {
  name Dot7
  xpos 231
  ypos 184
 }
set Nda0d6000 [stack 0]
 Dot {
  name Dot8
  xpos -567
  ypos 184
 }
 Colorspace {
  colorspace_out HSL
  name Colorspace1
  xpos -601
  ypos 389
 }
 Shuffle {
  red green
  blue green
  alpha black
  name Shuffle2
  xpos -601
  ypos 415
 }
 Expression {
  expr0 g>1?1:0
  expr1 0
  expr2 0
  name Expression1
  xpos -601
  ypos 441
 }
 Reformat {
  type scale
  scale 1.22
  resize none
  black_outside true
  name Reformat4
  xpos -601
  ypos 538
 }
 set Cda0e6800 [stack 0]
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Saturation Warinings"
  old_message {{83 97 116 117 114 97 116 105 111 110 32 87 97 114 105 110 105 110 103 115}
    }
  box {827.1999512 28.75 1515.199951 103.75}
  xjustify center
  transforms {{0 2}
    }
  cursor_position 12
  font {{ Courier : Regular : Courier.pfa : 0 }}
  global_font_scale 0.74
  scale {1 1}
  cursor_initialised true
  initial_cursor_position {{1171.199951 103.75}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
    }
  color 0.041
  name Text1
  xpos -601
  ypos 564
 }
 Dot {
  name Dot9
  xpos -567
  ypos 664
 }
push $Nda0d6000
 Shuffle {
  alpha white
  name Shuffle1
  xpos 197
  ypos 331
 }
 Reformat {
  type scale
  scale 1.04
  resize none
  black_outside true
  name Reformat2
  xpos 197
  ypos 380
 }
 Gamma {
  channels rgb
  value 1.5
  name Gamma3
  xpos 197
  ypos 516
 }
 Constant {
  inputs 0
  channels rgb
  color 0.093
  format {{{parent.Reformat1.format}}}
  name Constant5
  xpos 70
  ypos 415
 }
 CheckerBoard2 {
  inputs 0
  boxsize 5.45
  centerlinewidth 0
  name CheckerBoard1
  xpos 155
  ypos 413
 }
 Merge2 {
  inputs 2
  operation multiply
  name Merge3
  xpos 70
  ypos 502
 }
 Constant {
  inputs 0
  channels rgb
  color {0 1 0 1}
  format {{{parent.Reformat1.format}}}
  name Constant1
  xpos 60
  ypos 340
 }
 Constant {
  inputs 0
  channels rgb
  color {0.8750058413 1 0 1}
  format {{{parent.Reformat1.format}}}
  name Constant2
  xpos -41
  ypos 343
 }
 Constant {
  inputs 0
  channels rgb
  color {0 0 1 1}
  format {{{parent.Reformat1.format}}}
  name Constant3
  xpos -141
  ypos 344
 }
 Constant {
  inputs 0
  channels rgb
  color 1
  format {{{parent.Reformat1.format}}}
  name Constant4
  xpos -243
  ypos 342
 }
 Switch {
  inputs 5
  which {{colours}}
  name Switch1
  xpos -65
  ypos 528
 }
 Reformat {
  type scale
  scale {{parent.Reformat2.scale}}
  black_outside true
  name Reformat3
  xpos -65
  ypos 558
 }
 Merge2 {
  inputs 2
  name Merge2
  xpos 197
  ypos 558
 }
clone $Cda0e6800 {
  xpos 197
  ypos 622
  selected false
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Edge Bleeding Check"
  old_message {{69 100 103 101 32 66 108 101 101 100 105 110 103 32 67 104 101 99 107}
    }
  box {815.699951 28.75 1526.699951 103.75}
  xjustify center
  transforms {{0 2}
    }
  cursor_position 19
  font {{ Courier : Regular : Courier.pfa : 0 }}
  global_font_scale 0.74
  scale {1 1}
  cursor_initialised true
  initial_cursor_position {{1171.199951 103.75}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
    }
  color 0.041
  name Text2
  xpos 197
  ypos 646
 }
 Dot {
  name Dot10
  xpos 231
  ypos 688
 }
push $Nda0d5c00
 Blur {
  channels rgb
  size 2
  name Blur1
  xpos 705
  ypos 442
 }
push $Nda0d5c00
 Merge2 {
  inputs 2
  operation minus
  name Merge1
  xpos 595
  ypos 442
 }
 Gamma {
  channels rgb
  value 2
  name Gamma2
  xpos 595
  ypos 468
 }
clone $Cda0e6800 {
  xpos 595
  ypos 588
  selected false
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Grain/Noise Check"
  old_message {{71 114 97 105 110 47 78 111 105 115 101 32 67 104 101 99 107}
    }
  box {860.199951 28.75 1482.199951 103.75}
  xjustify center
  transforms {{0 2}
    }
  cursor_position 17
  font {{ Courier : Regular : Courier.pfa : 0 }}
  global_font_scale 0.74
  scale {1 1}
  cursor_initialised true
  initial_cursor_position {{1171.199951 103.75}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
    }
  color 0.041
  name Text3
  xpos 595
  ypos 612
 }
 Dot {
  name Dot11
  xpos 629
  ypos 695
 }
push $Nda0d5800
 Gamma {
  channels rgb
  value 2
  name Gamma1
  label check
  xpos 1009
  ypos 421
 }
clone $Cda0e6800 {
  xpos 1009
  ypos 590
  selected false
 }
 Text2 {
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "Gamma Check"
  old_message {{71 97 109 109 97 32 67 104 101 99 107}
    }
  box {922.199951 28.75 1420.199951 103.75}
  xjustify center
  transforms {{0 2}
    }
  cursor_position 11
  font {{ Courier : Regular : Courier.pfa : 0 }}
  global_font_scale 0.74
  scale {1 1}
  cursor_initialised true
  initial_cursor_position {{1171.199951 103.75}
    }
  group_animations {{0} imported: 0 selected: items: "root transform/"}
  animation_layers {{1 11 960 540 0 0 1 1 0 0 0 0}
    }
  color 0.041
  name Text4
  xpos 1009
  ypos 614
 }
 Dot {
  name Dot12
  xpos 1043
  ypos 719
 }
 Switch {
  inputs 4
  which {{qhview}}
  name view_check_switch
  xpos 485
  ypos 1046
 }
 Output {
  name Output1
  xpos 485
  ypos 1190
 }
end_group
Baselight {
 inputs 0 inputs 0 inputs 0 inputs 0 inputs 0 inputs 0 inputs 0 inputs 0
 blg_file /s84/jobs/Wyndham_DDB_230113/color/2322-Wyndham-Final-Color/BLGs/A016C010_230128_RP5A_3064.blg.exr
 set_input_colour_space "leave unchanged"
 set_output_colour_space "leave unchanged"
 set_output_format "from blg input format"
 input_colour_space {{6} "No Conversion" "ACES: ADX Log / ADX" "ACES: Cineon Log / AP0" "ACES: Linear / AP0" "ACEScc: ACEScc / AP1" "ACEScct: ACEScct / AP1" "ACEScg: Linear / AP1" "ARRI: Linear / ARRI Wide Gamut 3" "ARRI: Linear / ARRI Wide Gamut 4" "ARRI: LogC3 / ARRI Film Gamut" "ARRI: LogC3 / ARRI Wide Gamut 3" "ARRI: LogC4 / ARRI Wide Gamut 4" "Adobe: 2.2 Gamma / Adobe RGB (1998)" "Apple: 2.2 Gamma / P3 D65" "BMD: Cintel Negative" "BMD: Cintel Print" "Blackmagic Design: Linear / BMD Wide Gamut" "CGI: Linear / Rec.2020" "CGI: Linear / Rec.709" "Canon: Canon-Log / C500 Type A Daylight" "Canon: Canon-Log / C500 Type A Tungsten" "Canon: Canon-Log / CineGamut / Daylight" "Canon: Canon-Log / CineGamut / Tungsten" "Canon: Canon-Log / P3+ / Daylight" "Canon: Canon-Log / P3+ / Tungsten / 4.4 compatible" "Canon: Canon-Log2 / CineGamut / Daylight" "Canon: Canon-Log2 / CineGamut / Tungsten" "Canon: Canon-Log2 / P3+ / Daylight" "Canon: Canon-Log2 / P3+ / Tungsten" "Canon: Canon-Log3 / Rec.2020" "DCI: 2.6 Gamma / P3 D60" "DCI: 2.6 Gamma / P3 D65" "DCI: 2.6 Gamma / P3 DCI" "DCI: 2.6 Gamma / X′Y′Z′" "DJI: D-Log / D-Gamut" "DJI: Linear / D-Gamut" "Dolby: ST 2084 PQ / P3 D65 / 1000 nits" "Dolby: ST 2084 PQ / P3 D65 / 10000 nits" "Dolby: ST 2084 PQ / P3 D65 / 108 nits" "Dolby: ST 2084 PQ / P3 D65 / 2000 nits" "Dolby: ST 2084 PQ / P3 D65 / 4000 nits" "Dolby: ST 2084 PQ / P3 D65 / 600 nits" "Dolby: ST 2084 PQ / X′Y′Z′ / 108 nits " "FilmLight: Academy PD Log / ~ADX" "FilmLight: Cineon PD Log / Generic Negative" "FilmLight: Linear / E-Gamut" "FilmLight: T-Log / E-Gamut" "Legacy: Cineon Log / Rec.709" "Legacy: Linear / Rec.709" "Nuke: Linear / Rec.709" "Panasonic: V-Log / V-Gamut" "RED: Linear / REDWideGamutRGB" "RED: Log3G10 / REDWideGamutRGB" "RED: REDlog Film / REDcolor 2" "Rec.1886: 2.4 Gamma / Rec.709" "Rec.2020: 2.4 Gamma / Rec.2020" "Rec.2100: HLG 1.2 Gamma / Rec.2020 / 1000 nits" "Rec.2100: HLG 1.2 Gamma / Rec.2020 / Preview SDR" "Rec.2100: ST 2084 PQ / Rec.2020 / 1000 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 10000 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 108 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 2000 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 4000 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 600 nits" "Rec.709 Camera: ~1.95 Gamma / Rec.709" "Sony: Linear / S-Gamut3" "Sony: S-Log / S-Gamut" "Sony: S-Log2 / S-Gamut" "Sony: S-Log2 / S-Gamut Daylight" "Sony: S-Log2 / S-Gamut Tungsten" "Sony: S-Log3 / S-Gamut3" "Sony: S-Log3 / S-Gamut3.Cine" "sRGB Display: 2.2 Gamma / Rec.709" "sRGB: ~2.2 Gamma / Rec.709"}
 output_colour_space {{7} "From Viewing Colour Space" "No Conversion" "ACES: ADX Log / ADX" "ACES: Cineon Log / AP0" "ACES: Linear / AP0" "ACEScc: ACEScc / AP1" "ACEScct: ACEScct / AP1" "ACEScg: Linear / AP1" "ARRI: Linear / ARRI Wide Gamut 3" "ARRI: Linear / ARRI Wide Gamut 4" "ARRI: LogC3 / ARRI Film Gamut" "ARRI: LogC3 / ARRI Wide Gamut 3" "ARRI: LogC4 / ARRI Wide Gamut 4" "Adobe: 2.2 Gamma / Adobe RGB (1998)" "Apple: 2.2 Gamma / P3 D65" "BMD: Cintel Negative" "BMD: Cintel Print" "Blackmagic Design: Linear / BMD Wide Gamut" "CGI: Linear / Rec.2020" "CGI: Linear / Rec.709" "Canon: Canon-Log / C500 Type A Daylight" "Canon: Canon-Log / C500 Type A Tungsten" "Canon: Canon-Log / CineGamut / Daylight" "Canon: Canon-Log / CineGamut / Tungsten" "Canon: Canon-Log / P3+ / Daylight" "Canon: Canon-Log / P3+ / Tungsten / 4.4 compatible" "Canon: Canon-Log2 / CineGamut / Daylight" "Canon: Canon-Log2 / CineGamut / Tungsten" "Canon: Canon-Log2 / P3+ / Daylight" "Canon: Canon-Log2 / P3+ / Tungsten" "Canon: Canon-Log3 / Rec.2020" "DCI: 2.6 Gamma / P3 D60" "DCI: 2.6 Gamma / P3 D65" "DCI: 2.6 Gamma / P3 DCI" "DCI: 2.6 Gamma / X′Y′Z′" "DJI: D-Log / D-Gamut" "DJI: Linear / D-Gamut" "Dolby: ST 2084 PQ / P3 D65 / 1000 nits" "Dolby: ST 2084 PQ / P3 D65 / 10000 nits" "Dolby: ST 2084 PQ / P3 D65 / 108 nits" "Dolby: ST 2084 PQ / P3 D65 / 2000 nits" "Dolby: ST 2084 PQ / P3 D65 / 4000 nits" "Dolby: ST 2084 PQ / P3 D65 / 600 nits" "Dolby: ST 2084 PQ / X′Y′Z′ / 108 nits " "FilmLight: Academy PD Log / ~ADX" "FilmLight: Cineon PD Log / Generic Negative" "FilmLight: Linear / E-Gamut" "FilmLight: T-Log / E-Gamut" "Legacy: Cineon Log / Rec.709" "Legacy: Linear / Rec.709" "Nuke: Linear / Rec.709" "Panasonic: V-Log / V-Gamut" "RED: Linear / REDWideGamutRGB" "RED: Log3G10 / REDWideGamutRGB" "RED: REDlog Film / REDcolor 2" "Rec.1886: 2.4 Gamma / Rec.709" "Rec.2020: 2.4 Gamma / Rec.2020" "Rec.2100: HLG 1.2 Gamma / Rec.2020 / 1000 nits" "Rec.2100: HLG 1.2 Gamma / Rec.2020 / Preview SDR" "Rec.2100: ST 2084 PQ / Rec.2020 / 1000 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 10000 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 108 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 2000 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 4000 nits" "Rec.2100: ST 2084 PQ / Rec.2020 / 600 nits" "Rec.709 Camera: ~1.95 Gamma / Rec.709" "Sony: Linear / S-Gamut3" "Sony: S-Log / S-Gamut" "Sony: S-Log2 / S-Gamut" "Sony: S-Log2 / S-Gamut Daylight" "Sony: S-Log2 / S-Gamut Tungsten" "Sony: S-Log3 / S-Gamut3" "Sony: S-Log3 / S-Gamut3.Cine" "sRGB Display: 2.2 Gamma / Rec.709" "sRGB: ~2.2 Gamma / Rec.709"}
 Baselight {}
 name VIEWER_INPUT1
 xpos -1071
 ypos 755

 xpos 5477
 ypos 1388
 selected false
 disable false

 xpos 5477
 ypos 1388
 selected true
 disable false

 xpos 6029
 ypos 1737
 selected true
 disable false

 xpos 6029
 ypos 1737
 selected false
 disable false

 xpos -1068
 ypos -190
 selected false
 disable false

 xpos -1068
 ypos -190
 selected false
 disable false

 xpos -1036
 ypos -179
 selected false
 disable true
}
push $Nda02ce00
PostageStamp {
 name Stamp1
 help "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021"
 onCreate "if nuke.GUI:\n    try:\n        import stamps; stamps.wiredOnCreate()\n    except:\n        pass\n"
 knobChanged "import stamps; stamps.wiredKnobChanged()"
 autolabel "nuke.thisNode().knob(\"title\").value()"
 tile_color 0x1000001
 note_font Verdana
 note_font_size 20
 xpos 304
 ypos -1314
 hide_input true
 addUserKnob {20 wired_tab l "Wired Stamp"}
 addUserKnob {26 identifier +HIDDEN T wired}
 addUserKnob {3 lockCallbacks l "" +STARTLINE +HIDDEN}
 addUserKnob {6 toReconnect -STARTLINE +HIDDEN}
 addUserKnob {1 title l Title: t "Displayed name on the Node Graph for this Stamp and its Anchor.\nIMPORTANT: This is only for display purposes, and is different from the real/internal name of the Stamps."}
 title plate-denoise
 addUserKnob {26 prev_title l "" +STARTLINE +HIDDEN T plate-denoise}
 addUserKnob {26 tags l Tags: t "Tags of this stamp's Anchor, for information purpose only.\nClick \"show anchor\" to change them." T <i>2D</i>}
 addUserKnob {26 backdrops l Backdrops: t "Labels of backdrop nodes which contain this stamp's Anchor." +HIDDEN T " "}
 addUserKnob {26 line1 l "" +STARTLINE}
 addUserKnob {6 postageStamp_show l "postage stamp" t "Enable the postage stamp thumbnail in this node.\nYou're seeing this because the class of this node includes the postage_stamp knob." +STARTLINE}
 addUserKnob {26 anchor_label l Anchor: T " "}
 addUserKnob {22 show_anchor l " show anchor " t "Show the properties panel for this Stamp's Anchor." -STARTLINE T stamps.wiredShowAnchor()}
 addUserKnob {22 zoom_anchor l "zoom anchor" t "Navigate to this Stamp's Anchor on the Node Graph." -STARTLINE T stamps.wiredZoomAnchor()}
 addUserKnob {26 stamps_label l Stamps: T " "}
 addUserKnob {22 zoomNext l " zoom next " t "Navigate to this Stamp's next sibling on the Node Graph." -STARTLINE T stamps.wiredZoomNext()}
 addUserKnob {22 selectSimilar l " select similar " t "Select all similar Stamps to this one on the Node Graph." -STARTLINE T stamps.wiredSelectSimilar()}
 addUserKnob {26 space_1 l "" +STARTLINE T " "}
 addUserKnob {26 reconnect_label l Reconnect: t "Reconnect by the stored Anchor name." T " "}
 addUserKnob {22 reconnect_this l this t "Reconnect this Stamp to its Anchor, by its stored Anchor name." -STARTLINE T "n = nuke.thisNode()\ntry:\n    n.setInput(0,nuke.toNode(n.knob(\"anchor\").value()))\nexcept:\n    nuke.message(\"Unable to reconnect.\")\ntry:\n    import stamps\n    stamps.wiredGetStyle(n)\nexcept:\n    pass\n"}
 addUserKnob {22 reconnect_similar l similar t "Reconnect this Stamp and similar ones to their Anchor, by their stored anchor name." -STARTLINE T stamps.wiredReconnectSimilar()}
 addUserKnob {22 reconnect_all l all t "Reconnect all the Stamps to their Anchors, by their stored anchor names." -STARTLINE T stamps.wiredReconnectAll()}
 addUserKnob {26 space_2 l "" +STARTLINE T " "}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n 2}
 addUserKnob {26 reconnect_by_title_label l "<font color=gold>By Title:" t "Reconnect by searching for a matching title." T " "}
 addUserKnob {22 reconnect_by_title_this l this t "Look for an Anchor that shares this Stamp's title, and connect this Stamp to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitle()}
 addUserKnob {22 reconnect_by_title_similar l similar t "Look for an Anchor that shares this Stamp's title, and connect this Stamp and similar ones to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSimilar()}
 addUserKnob {22 reconnect_by_title_selected l selected t "For each Stamp selected, look for an Anchor that shares its title, and connect to it.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectByTitleSelected()}
 addUserKnob {26 reconnect_by_selection_label l "<font color=orangered>By Selection:" t "Force reconnect to a selected Anchor." T " "}
 addUserKnob {22 reconnect_by_selection_this l this t "Force reconnect this Stamp to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelection()}
 addUserKnob {22 reconnect_by_selection_similar l similar t "Force reconnect this Stamp and similar ones to a selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSimilar()}
 addUserKnob {22 reconnect_by_selection_selected l selected t "Force reconnect all selected Stamps to an also selected Anchor, whatever its name or title.\nIMPORTANT: Use this carefully, and only when the normal reconnection doesn't work." -STARTLINE T stamps.wiredReconnectBySelectionSelected()}
 addUserKnob {1 anchor l Anchor}
 anchor Anchor_1bc563a7f2
 addUserKnob {6 auto_reconnect_by_title l "<font color=#ED9977>&nbsp; auto-reconnect by title" t "When creating this stamp again (like on copy-paste), auto-reconnect it by title instead of doing it by the saved anchor's name, and auto-turn this off immediately.\nIMPORTANT: Should be off by default. Only use this for setting up templates." +STARTLINE}
 addUserKnob {20 advanced_reconnection l "Advanced Reconnection" n -1}
 addUserKnob {26 line2 l "" +STARTLINE}
 addUserKnob {22 buttonHelp l Help -STARTLINE T stamps.showHelp()}
 addUserKnob {26 version l " " t "Stamps by Adrian Pueyo and Alexey Kuchinski.\nUpdated May 18 2021." -STARTLINE T "<a href=\"http://www.nukepedia.com/gizmos/other/stamps\" style=\"color:#666;text-decoration: none;\"><span style=\"color:#666\"> <big>Stamps v1.1</big></b></a>"}
}
Group {
 name PxF_Bandpass
 help "Extract detail from an image by subtracting the original image from a blur of itself.\nUseful to enhance an image for easier tracking."
 tile_color 0x733520ff
 xpos 304
 ypos -1239
 disable true
 addUserKnob {20 User}
 addUserKnob {41 colorspace_out l Colorspace t "Pixel values will be converted from linear to this colorspace before processing." T Colorspace1.colorspace_out}
 addUserKnob {41 blur_1 l blurAmount1 T Blur1.size}
 addUserKnob {41 blur_2 l blurAmount2 T Blur2.size}
 addUserKnob {7 brightness l Gain t "Overall gain applied after bandpass filter." R 0 20}
 brightness 19.1
 addUserKnob {41 saturation t "Overall saturation after bandpass and gain." T Saturation1.saturation}
 addUserKnob {7 offset l offsetDarks t "Constant added after bandpass."}
 offset 0.5
 addUserKnob {6 pre_bc l "pre black clamp" t "Clamp blacks before bandpass." +STARTLINE}
 pre_bc true
 addUserKnob {6 pre_wc l "pre white clamp" t "Clamp whites before bandpass." -STARTLINE}
 addUserKnob {6 bc l "post black clamp" t "Clamp blacks after bandpass." +STARTLINE}
 bc true
 addUserKnob {6 wc l "post white clamp" t "Clamp whites after bandpass." -STARTLINE}
 wc true
 addUserKnob {7 mix}
 mix 1
 addUserKnob {26 ""}
 addUserKnob {26 Credits l "" t "PxF_Bandpass 2.5 - &copy; 2012-2023 - Xavier Bourque - pixelfudger.com \n\nPixelfudger gizmos are free to use for personal and commercial use as long as you leave the credit text intact in the gizmo's knobs and in the source files. " +STARTLINE T "<font size=2>PxF_Bandpass 2.5 - &copy; 2012-2023 - </font><a href=\"http://www.xavierbourque.com\"><font color=\"#bbbbbb\" size=2>Xavier Bourque</a></font> - <a href=\"http://www.pixelfudger.com\"><font color=\"#bbbbbb\" size=2>pixelfudger.com</a></font> - <a href=\"http://www.pixelfudger.com/userguides/PxF_BandPass.html\"><font color=\"#bbbbbb\" size=2>Video Tutorial</a></font>"}
}
 Input {
  inputs 0
  name mask
  xpos 434
  ypos 141
  number 1
 }
 Input {
  inputs 0
  name img
  xpos 171
  ypos -273
 }
set Nd9954200 [stack 0]
 Clamp {
  minimum_enable {{parent.pre_bc}}
  maximum_enable {{parent.pre_wc}}
  name Clamp1
  xpos 171
  ypos -219
 }
set Nd9954600 [stack 0]
 Dot {
  name Dot1
  xpos 405
  ypos 31
 }
set Nd9956c00 [stack 0]
push $Nd9956c00
push $Nd9954600
 Colorspace {
  colorspace_out Cineon
  name Colorspace1
  xpos 171
  ypos -163
 }
set Nd9951e00 [stack 0]
 Blur {
  name Blur1
  xpos 132
  ypos -126
 }
push $Nd9951e00
 Blur {
  size 100
  name Blur2
  xpos 227
  ypos -127
 }
 Merge2 {
  inputs 2
  operation minus
  name Merge1
  xpos 180
  ypos -71
 }
 Grade {
  white {{brightness}}
  add {{offset}}
  black_clamp {{bc}}
  white_clamp {{wc}}
  name Grade1
  xpos 180
  ypos 4
 }
 Saturation {
  saturation 0
  name Saturation1
  xpos 180
  ypos 47
 }
 ShuffleCopy {
  inputs 2
  name ShuffleCopy1
  xpos 180
  ypos 163
 }
 Keymix {
  inputs 3
  invertMask true
  bbox B
  name Keymix1
  xpos 180
  ypos 229
  disable {{"\[exists parent.input1] ? 0 : 1" x1 0}}
 }
push $Nd9954200
 Dot {
  name Dot3
  note_font_size 22
  xpos 37
  ypos -179
 }
 Dot {
  name Dot2
  note_font_size 22
  xpos 37
  ypos 228
 }
 Dissolve {
  inputs 2
  which {{parent.mix}}
  name Dissolve1
  xpos 180
  ypos 294
 }
 Output {
  name Output1
  xpos 180
  ypos 361
 }
end_group
NoOp {
 inputs 0
 name cam_
 tile_color 0xffffff01
 note_font_size 20
 xpos -1274
 ypos -595
 addUserKnob {20 anchor_tab l "Anchor Controls"}
 addUserKnob {26 connection l "connected to: " T cache_v007}
 addUserKnob {26 data_type l "data type:" +HIDDEN T Camera}
 addUserKnob {26 identifier -STARTLINE +HIDDEN T anchor}
 addUserKnob {22 Rename T "\nthisNode = nuke.thisNode()\noriginalName = thisNode\['name'].value()\nall_NoOp = nuke.allNodes('NoOp')\n\nRenamepanel = nuke.Panel('Rename')\nRenamepanel.addSingleLineInput(\"New Name:\", originalName)\npanel_show = Renamepanel.show()\ncopy_count = 0\n\nif panel_show:\n\tnameInput = Renamepanel.value(\"New Name:\")\n\tall_Nodes = nuke.allNodes()\n\tfor node in all_Nodes:\n\t\tif node\['name'].value() == nameInput:\n\t\t\traise Exception('Name is already in use, please select another name')\n\n\tfor node in all_NoOp:\n\t\tif node\['connection'].value() == originalName:\n\t\t\tif copy_count == 0:\n\t\t\t\tnode\['connection'].setValue(nameInput)\n\t\t\t\tnode\['name'].setValue(nameInput)\n\t\t\t\tcopy_count += 1\n\t\t\telse:\n\t\t\t\tnode\['connection'].setValue(nameInput)\n\t\t\t\tnode\['name'].setValue(nameInput + str(copy_count))\n\t\t\t\tcopy_count += 1\n\n\n\tthisNode\['name'].setValue(nameInput)\n\n\t" +STARTLINE}
}
